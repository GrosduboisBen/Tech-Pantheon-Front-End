/**
 * Project Manager ( Portfolio )
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
  HTTPValidationError,
  UserCreate,
  UserListResponse,
  UserResponse,
  UserUpdate,
} from '../models';

export interface CreateApiUsersPostRequest {
  userCreate: UserCreate;
}

export interface DeleteApiUsersUserIdDeleteRequest {
  userId: string;
}

export interface ReadUserApiUsersUserIdGetRequest {
  userId: string;
}

export interface ReadUsersApiUsersGetRequest {
  page?: number;
  pageSize?: number;
}

export interface UpdateApiUsersUserIdPutRequest {
  userId: string;
  userUpdate: UserUpdate;
}

/**
 * no description
 */
export class UsersApi extends BaseAPI {
  /**
   * Create
   */
  createApiUsersPost({
    userCreate,
  }: CreateApiUsersPostRequest): Observable<UserResponse>;
  createApiUsersPost(
    { userCreate }: CreateApiUsersPostRequest,
    opts?: OperationOpts
  ): Observable<AjaxResponse<UserResponse>>;
  createApiUsersPost(
    { userCreate }: CreateApiUsersPostRequest,
    opts?: OperationOpts
  ): Observable<UserResponse | AjaxResponse<UserResponse>> {
    throwIfNullOrUndefined(userCreate, 'userCreate', 'createApiUsersPost');

    const headers: HttpHeaders = {
      'Content-Type': 'application/json',
    };

    return this.request<UserResponse>(
      {
        url: '/api/users/',
        method: 'POST',
        headers,
        body: userCreate,
      },
      opts?.responseOpts
    );
  }

  /**
   * Delete
   */
  deleteApiUsersUserIdDelete({
    userId,
  }: DeleteApiUsersUserIdDeleteRequest): Observable<any>;
  deleteApiUsersUserIdDelete(
    { userId }: DeleteApiUsersUserIdDeleteRequest,
    opts?: OperationOpts
  ): Observable<AjaxResponse<any>>;
  deleteApiUsersUserIdDelete(
    { userId }: DeleteApiUsersUserIdDeleteRequest,
    opts?: OperationOpts
  ): Observable<any | AjaxResponse<any>> {
    throwIfNullOrUndefined(userId, 'userId', 'deleteApiUsersUserIdDelete');

    return this.request<any>(
      {
        url: '/api/users/{user_id}'.replace('{user_id}', encodeURI(userId)),
        method: 'DELETE',
      },
      opts?.responseOpts
    );
  }

  /**
   * Read User
   */
  readUserApiUsersUserIdGet({
    userId,
  }: ReadUserApiUsersUserIdGetRequest): Observable<UserResponse>;
  readUserApiUsersUserIdGet(
    { userId }: ReadUserApiUsersUserIdGetRequest,
    opts?: OperationOpts
  ): Observable<AjaxResponse<UserResponse>>;
  readUserApiUsersUserIdGet(
    { userId }: ReadUserApiUsersUserIdGetRequest,
    opts?: OperationOpts
  ): Observable<UserResponse | AjaxResponse<UserResponse>> {
    throwIfNullOrUndefined(userId, 'userId', 'readUserApiUsersUserIdGet');

    return this.request<UserResponse>(
      {
        url: '/api/users/{user_id}'.replace('{user_id}', encodeURI(userId)),
        method: 'GET',
      },
      opts?.responseOpts
    );
  }

  /**
   * Read Users
   */
  readUsersApiUsersGet({
    page,
    pageSize,
  }: ReadUsersApiUsersGetRequest): Observable<UserListResponse>;
  readUsersApiUsersGet(
    { page, pageSize }: ReadUsersApiUsersGetRequest,
    opts?: OperationOpts
  ): Observable<AjaxResponse<UserListResponse>>;
  readUsersApiUsersGet(
    { page, pageSize }: ReadUsersApiUsersGetRequest,
    opts?: OperationOpts
  ): Observable<UserListResponse | AjaxResponse<UserListResponse>> {
    const query: HttpQuery = {};

    if (page != null) {
      query['page'] = page;
    }
    if (pageSize != null) {
      query['page_size'] = pageSize;
    }

    return this.request<UserListResponse>(
      {
        url: '/api/users/',
        method: 'GET',
        query,
      },
      opts?.responseOpts
    );
  }

  /**
   * Update
   */
  updateApiUsersUserIdPut({
    userId,
    userUpdate,
  }: UpdateApiUsersUserIdPutRequest): Observable<UserResponse>;
  updateApiUsersUserIdPut(
    { userId, userUpdate }: UpdateApiUsersUserIdPutRequest,
    opts?: OperationOpts
  ): Observable<AjaxResponse<UserResponse>>;
  updateApiUsersUserIdPut(
    { userId, userUpdate }: UpdateApiUsersUserIdPutRequest,
    opts?: OperationOpts
  ): Observable<UserResponse | AjaxResponse<UserResponse>> {
    throwIfNullOrUndefined(userId, 'userId', 'updateApiUsersUserIdPut');
    throwIfNullOrUndefined(userUpdate, 'userUpdate', 'updateApiUsersUserIdPut');

    const headers: HttpHeaders = {
      'Content-Type': 'application/json',
    };

    return this.request<UserResponse>(
      {
        url: '/api/users/{user_id}'.replace('{user_id}', encodeURI(userId)),
        method: 'PUT',
        headers,
        body: userUpdate,
      },
      opts?.responseOpts
    );
  }
}
