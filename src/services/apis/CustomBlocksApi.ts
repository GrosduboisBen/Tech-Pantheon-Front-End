/* tslint:disable */
/* eslint-disable */
/**
 * Project Manager ( Portfolio )
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CustomBlockCreate,
  CustomBlockResponse,
  CustomBlockUpdate,
  HTTPValidationError,
} from '../models/index';
import {
    CustomBlockCreateFromJSON,
    CustomBlockCreateToJSON,
    CustomBlockResponseFromJSON,
    CustomBlockResponseToJSON,
    CustomBlockUpdateFromJSON,
    CustomBlockUpdateToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
} from '../models/index';

export interface CreateApiCustomBlocksPostRequest {
    customBlockCreate: CustomBlockCreate;
}

export interface DeleteApiCustomBlocksBlockIdDeleteRequest {
    blockId: string;
}

export interface ReadApiCustomBlocksBlockIdGetRequest {
    blockId: string;
}

export interface UpdateApiCustomBlocksBlockIdPutRequest {
    blockId: string;
    customBlockUpdate: CustomBlockUpdate;
}

/**
 * CustomBlocksApi - interface
 * 
 * @export
 * @interface CustomBlocksApiInterface
 */
export interface CustomBlocksApiInterface {
    /**
     * Create a new custom block.
     * @summary Create
     * @param {CustomBlockCreate} customBlockCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomBlocksApiInterface
     */
    createApiCustomBlocksPostRaw(requestParameters: CreateApiCustomBlocksPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomBlockResponse>>;

    /**
     * Create a new custom block.
     * Create
     */
    createApiCustomBlocksPost(customBlockCreate: CustomBlockCreate, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomBlockResponse>;

    /**
     * Delete a custom block by ID.
     * @summary Delete
     * @param {string} blockId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomBlocksApiInterface
     */
    deleteApiCustomBlocksBlockIdDeleteRaw(requestParameters: DeleteApiCustomBlocksBlockIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * Delete a custom block by ID.
     * Delete
     */
    deleteApiCustomBlocksBlockIdDelete(blockId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * Retrieve a custom block by ID.
     * @summary Read
     * @param {string} blockId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomBlocksApiInterface
     */
    readApiCustomBlocksBlockIdGetRaw(requestParameters: ReadApiCustomBlocksBlockIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomBlockResponse>>;

    /**
     * Retrieve a custom block by ID.
     * Read
     */
    readApiCustomBlocksBlockIdGet(blockId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomBlockResponse>;

    /**
     * Update a custom block by ID.
     * @summary Update
     * @param {string} blockId 
     * @param {CustomBlockUpdate} customBlockUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomBlocksApiInterface
     */
    updateApiCustomBlocksBlockIdPutRaw(requestParameters: UpdateApiCustomBlocksBlockIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomBlockResponse>>;

    /**
     * Update a custom block by ID.
     * Update
     */
    updateApiCustomBlocksBlockIdPut(blockId: string, customBlockUpdate: CustomBlockUpdate, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomBlockResponse>;

}

/**
 * 
 */
export class CustomBlocksApi extends runtime.BaseAPI implements CustomBlocksApiInterface {

    /**
     * Create a new custom block.
     * Create
     */
    async createApiCustomBlocksPostRaw(requestParameters: CreateApiCustomBlocksPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomBlockResponse>> {
        if (requestParameters['customBlockCreate'] == null) {
            throw new runtime.RequiredError(
                'customBlockCreate',
                'Required parameter "customBlockCreate" was null or undefined when calling createApiCustomBlocksPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/custom_blocks/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CustomBlockCreateToJSON(requestParameters['customBlockCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomBlockResponseFromJSON(jsonValue));
    }

    /**
     * Create a new custom block.
     * Create
     */
    async createApiCustomBlocksPost(customBlockCreate: CustomBlockCreate, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomBlockResponse> {
        const response = await this.createApiCustomBlocksPostRaw({ customBlockCreate: customBlockCreate }, initOverrides);
        return await response.value();
    }

    /**
     * Delete a custom block by ID.
     * Delete
     */
    async deleteApiCustomBlocksBlockIdDeleteRaw(requestParameters: DeleteApiCustomBlocksBlockIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['blockId'] == null) {
            throw new runtime.RequiredError(
                'blockId',
                'Required parameter "blockId" was null or undefined when calling deleteApiCustomBlocksBlockIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/custom_blocks/{block_id}`.replace(`{${"block_id"}}`, encodeURIComponent(String(requestParameters['blockId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Delete a custom block by ID.
     * Delete
     */
    async deleteApiCustomBlocksBlockIdDelete(blockId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.deleteApiCustomBlocksBlockIdDeleteRaw({ blockId: blockId }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a custom block by ID.
     * Read
     */
    async readApiCustomBlocksBlockIdGetRaw(requestParameters: ReadApiCustomBlocksBlockIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomBlockResponse>> {
        if (requestParameters['blockId'] == null) {
            throw new runtime.RequiredError(
                'blockId',
                'Required parameter "blockId" was null or undefined when calling readApiCustomBlocksBlockIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/custom_blocks/{block_id}`.replace(`{${"block_id"}}`, encodeURIComponent(String(requestParameters['blockId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomBlockResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve a custom block by ID.
     * Read
     */
    async readApiCustomBlocksBlockIdGet(blockId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomBlockResponse> {
        const response = await this.readApiCustomBlocksBlockIdGetRaw({ blockId: blockId }, initOverrides);
        return await response.value();
    }

    /**
     * Update a custom block by ID.
     * Update
     */
    async updateApiCustomBlocksBlockIdPutRaw(requestParameters: UpdateApiCustomBlocksBlockIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomBlockResponse>> {
        if (requestParameters['blockId'] == null) {
            throw new runtime.RequiredError(
                'blockId',
                'Required parameter "blockId" was null or undefined when calling updateApiCustomBlocksBlockIdPut().'
            );
        }

        if (requestParameters['customBlockUpdate'] == null) {
            throw new runtime.RequiredError(
                'customBlockUpdate',
                'Required parameter "customBlockUpdate" was null or undefined when calling updateApiCustomBlocksBlockIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/custom_blocks/{block_id}`.replace(`{${"block_id"}}`, encodeURIComponent(String(requestParameters['blockId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CustomBlockUpdateToJSON(requestParameters['customBlockUpdate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomBlockResponseFromJSON(jsonValue));
    }

    /**
     * Update a custom block by ID.
     * Update
     */
    async updateApiCustomBlocksBlockIdPut(blockId: string, customBlockUpdate: CustomBlockUpdate, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomBlockResponse> {
        const response = await this.updateApiCustomBlocksBlockIdPutRaw({ blockId: blockId, customBlockUpdate: customBlockUpdate }, initOverrides);
        return await response.value();
    }

}
