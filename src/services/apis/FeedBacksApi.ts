// tslint:disable
/**
 * Project Manager ( Portfolio )
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
    FeedbackCreate,
    FeedbackListResponse,
    FeedbackResponse,
    FeedbackUpdate,
    HTTPValidationError,
} from '../models';

export interface CreateApiFeedbacksPostRequest {
    feedbackCreate: FeedbackCreate;
}

export interface DeleteApiFeedbacksFeedbackIdDeleteRequest {
    feedbackId: string;
}

export interface ReadFeedbackApiFeedbacksFeedbackIdGetRequest {
    feedbackId: string;
}

export interface ReadFeedbacksApiFeedbacksGetRequest {
    page?: number;
    pageSize?: number;
}

export interface UpdateApiFeedbacksFeedbackIdPutRequest {
    feedbackId: string;
    feedbackUpdate: FeedbackUpdate;
}

/**
 * no description
 */
export class FeedBacksApi extends BaseAPI {

    /**
     * Create a new feedback.
     * Create
     */
    createApiFeedbacksPost({ feedbackCreate }: CreateApiFeedbacksPostRequest): Observable<FeedbackResponse>
    createApiFeedbacksPost({ feedbackCreate }: CreateApiFeedbacksPostRequest, opts?: OperationOpts): Observable<AjaxResponse<FeedbackResponse>>
    createApiFeedbacksPost({ feedbackCreate }: CreateApiFeedbacksPostRequest, opts?: OperationOpts): Observable<FeedbackResponse | AjaxResponse<FeedbackResponse>> {
        throwIfNullOrUndefined(feedbackCreate, 'feedbackCreate', 'createApiFeedbacksPost');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<FeedbackResponse>({
            url: '/api/feedbacks/',
            method: 'POST',
            headers,
            body: feedbackCreate,
        }, opts?.responseOpts);
    };

    /**
     * Delete a feedback by ID.
     * Delete
     */
    deleteApiFeedbacksFeedbackIdDelete({ feedbackId }: DeleteApiFeedbacksFeedbackIdDeleteRequest): Observable<any>
    deleteApiFeedbacksFeedbackIdDelete({ feedbackId }: DeleteApiFeedbacksFeedbackIdDeleteRequest, opts?: OperationOpts): Observable<AjaxResponse<any>>
    deleteApiFeedbacksFeedbackIdDelete({ feedbackId }: DeleteApiFeedbacksFeedbackIdDeleteRequest, opts?: OperationOpts): Observable<any | AjaxResponse<any>> {
        throwIfNullOrUndefined(feedbackId, 'feedbackId', 'deleteApiFeedbacksFeedbackIdDelete');

        return this.request<any>({
            url: '/api/feedbacks/{feedback_id}'.replace('{feedback_id}', encodeURI(feedbackId)),
            method: 'DELETE',
        }, opts?.responseOpts);
    };

    /**
     * Retrieve a feedback by ID.
     * Read Feedback
     */
    readFeedbackApiFeedbacksFeedbackIdGet({ feedbackId }: ReadFeedbackApiFeedbacksFeedbackIdGetRequest): Observable<FeedbackResponse>
    readFeedbackApiFeedbacksFeedbackIdGet({ feedbackId }: ReadFeedbackApiFeedbacksFeedbackIdGetRequest, opts?: OperationOpts): Observable<AjaxResponse<FeedbackResponse>>
    readFeedbackApiFeedbacksFeedbackIdGet({ feedbackId }: ReadFeedbackApiFeedbacksFeedbackIdGetRequest, opts?: OperationOpts): Observable<FeedbackResponse | AjaxResponse<FeedbackResponse>> {
        throwIfNullOrUndefined(feedbackId, 'feedbackId', 'readFeedbackApiFeedbacksFeedbackIdGet');

        return this.request<FeedbackResponse>({
            url: '/api/feedbacks/{feedback_id}'.replace('{feedback_id}', encodeURI(feedbackId)),
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     * Retrieve a list of feedbacks with pagination.
     * Read Feedbacks
     */
    readFeedbacksApiFeedbacksGet({ page, pageSize }: ReadFeedbacksApiFeedbacksGetRequest): Observable<FeedbackListResponse>
    readFeedbacksApiFeedbacksGet({ page, pageSize }: ReadFeedbacksApiFeedbacksGetRequest, opts?: OperationOpts): Observable<AjaxResponse<FeedbackListResponse>>
    readFeedbacksApiFeedbacksGet({ page, pageSize }: ReadFeedbacksApiFeedbacksGetRequest, opts?: OperationOpts): Observable<FeedbackListResponse | AjaxResponse<FeedbackListResponse>> {

        const query: HttpQuery = {};

        if (page != null) { query['page'] = page; }
        if (pageSize != null) { query['page_size'] = pageSize; }

        return this.request<FeedbackListResponse>({
            url: '/api/feedbacks/',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Update a feedback by ID.
     * Update
     */
    updateApiFeedbacksFeedbackIdPut({ feedbackId, feedbackUpdate }: UpdateApiFeedbacksFeedbackIdPutRequest): Observable<FeedbackResponse>
    updateApiFeedbacksFeedbackIdPut({ feedbackId, feedbackUpdate }: UpdateApiFeedbacksFeedbackIdPutRequest, opts?: OperationOpts): Observable<AjaxResponse<FeedbackResponse>>
    updateApiFeedbacksFeedbackIdPut({ feedbackId, feedbackUpdate }: UpdateApiFeedbacksFeedbackIdPutRequest, opts?: OperationOpts): Observable<FeedbackResponse | AjaxResponse<FeedbackResponse>> {
        throwIfNullOrUndefined(feedbackId, 'feedbackId', 'updateApiFeedbacksFeedbackIdPut');
        throwIfNullOrUndefined(feedbackUpdate, 'feedbackUpdate', 'updateApiFeedbacksFeedbackIdPut');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<FeedbackResponse>({
            url: '/api/feedbacks/{feedback_id}'.replace('{feedback_id}', encodeURI(feedbackId)),
            method: 'PUT',
            headers,
            body: feedbackUpdate,
        }, opts?.responseOpts);
    };

}
