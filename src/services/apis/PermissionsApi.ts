/* tslint:disable */
/* eslint-disable */
/**
 * Project Manager ( Portfolio )
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  PermissionCreate,
  PermissionListResponse,
  PermissionResponse,
  PermissionUpdate,
} from '../models/index';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    PermissionCreateFromJSON,
    PermissionCreateToJSON,
    PermissionListResponseFromJSON,
    PermissionListResponseToJSON,
    PermissionResponseFromJSON,
    PermissionResponseToJSON,
    PermissionUpdateFromJSON,
    PermissionUpdateToJSON,
} from '../models/index';

export interface CreateApiPermissionsPostRequest {
    permissionCreate: PermissionCreate;
}

export interface DeleteApiPermissionsPermissionIdDeleteRequest {
    permissionId: string;
}

export interface ReadPermissionApiPermissionsPermissionIdGetRequest {
    permissionId: string;
}

export interface ReadPermissionsApiPermissionsGetRequest {
    page?: number;
    pageSize?: number;
}

export interface UpdateApiPermissionsPermissionIdPutRequest {
    permissionId: string;
    permissionUpdate: PermissionUpdate;
}

/**
 * PermissionsApi - interface
 * 
 * @export
 * @interface PermissionsApiInterface
 */
export interface PermissionsApiInterface {
    /**
     * Create a new permission.
     * @summary Create
     * @param {PermissionCreate} permissionCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionsApiInterface
     */
    createApiPermissionsPostRaw(requestParameters: CreateApiPermissionsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PermissionResponse>>;

    /**
     * Create a new permission.
     * Create
     */
    createApiPermissionsPost(permissionCreate: PermissionCreate, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PermissionResponse>;

    /**
     * Delete a permission by ID.
     * @summary Delete
     * @param {string} permissionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionsApiInterface
     */
    deleteApiPermissionsPermissionIdDeleteRaw(requestParameters: DeleteApiPermissionsPermissionIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * Delete a permission by ID.
     * Delete
     */
    deleteApiPermissionsPermissionIdDelete(permissionId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * Retrieve a permission by ID.
     * @summary Read Permission
     * @param {string} permissionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionsApiInterface
     */
    readPermissionApiPermissionsPermissionIdGetRaw(requestParameters: ReadPermissionApiPermissionsPermissionIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PermissionResponse>>;

    /**
     * Retrieve a permission by ID.
     * Read Permission
     */
    readPermissionApiPermissionsPermissionIdGet(permissionId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PermissionResponse>;

    /**
     * Retrieve a list of permissions with pagination.
     * @summary Read Permissions
     * @param {number} [page] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionsApiInterface
     */
    readPermissionsApiPermissionsGetRaw(requestParameters: ReadPermissionsApiPermissionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PermissionListResponse>>;

    /**
     * Retrieve a list of permissions with pagination.
     * Read Permissions
     */
    readPermissionsApiPermissionsGet(page?: number, pageSize?: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PermissionListResponse>;

    /**
     * Update a permission by ID.
     * @summary Update
     * @param {string} permissionId 
     * @param {PermissionUpdate} permissionUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionsApiInterface
     */
    updateApiPermissionsPermissionIdPutRaw(requestParameters: UpdateApiPermissionsPermissionIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PermissionResponse>>;

    /**
     * Update a permission by ID.
     * Update
     */
    updateApiPermissionsPermissionIdPut(permissionId: string, permissionUpdate: PermissionUpdate, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PermissionResponse>;

}

/**
 * 
 */
export class PermissionsApi extends runtime.BaseAPI implements PermissionsApiInterface {

    /**
     * Create a new permission.
     * Create
     */
    async createApiPermissionsPostRaw(requestParameters: CreateApiPermissionsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PermissionResponse>> {
        if (requestParameters['permissionCreate'] == null) {
            throw new runtime.RequiredError(
                'permissionCreate',
                'Required parameter "permissionCreate" was null or undefined when calling createApiPermissionsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/permissions/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PermissionCreateToJSON(requestParameters['permissionCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PermissionResponseFromJSON(jsonValue));
    }

    /**
     * Create a new permission.
     * Create
     */
    async createApiPermissionsPost(permissionCreate: PermissionCreate, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PermissionResponse> {
        const response = await this.createApiPermissionsPostRaw({ permissionCreate: permissionCreate }, initOverrides);
        return await response.value();
    }

    /**
     * Delete a permission by ID.
     * Delete
     */
    async deleteApiPermissionsPermissionIdDeleteRaw(requestParameters: DeleteApiPermissionsPermissionIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['permissionId'] == null) {
            throw new runtime.RequiredError(
                'permissionId',
                'Required parameter "permissionId" was null or undefined when calling deleteApiPermissionsPermissionIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/permissions/{permission_id}`.replace(`{${"permission_id"}}`, encodeURIComponent(String(requestParameters['permissionId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Delete a permission by ID.
     * Delete
     */
    async deleteApiPermissionsPermissionIdDelete(permissionId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.deleteApiPermissionsPermissionIdDeleteRaw({ permissionId: permissionId }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a permission by ID.
     * Read Permission
     */
    async readPermissionApiPermissionsPermissionIdGetRaw(requestParameters: ReadPermissionApiPermissionsPermissionIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PermissionResponse>> {
        if (requestParameters['permissionId'] == null) {
            throw new runtime.RequiredError(
                'permissionId',
                'Required parameter "permissionId" was null or undefined when calling readPermissionApiPermissionsPermissionIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/permissions/{permission_id}`.replace(`{${"permission_id"}}`, encodeURIComponent(String(requestParameters['permissionId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PermissionResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve a permission by ID.
     * Read Permission
     */
    async readPermissionApiPermissionsPermissionIdGet(permissionId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PermissionResponse> {
        const response = await this.readPermissionApiPermissionsPermissionIdGetRaw({ permissionId: permissionId }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of permissions with pagination.
     * Read Permissions
     */
    async readPermissionsApiPermissionsGetRaw(requestParameters: ReadPermissionsApiPermissionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PermissionListResponse>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/permissions/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PermissionListResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve a list of permissions with pagination.
     * Read Permissions
     */
    async readPermissionsApiPermissionsGet(page?: number, pageSize?: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PermissionListResponse> {
        const response = await this.readPermissionsApiPermissionsGetRaw({ page: page, pageSize: pageSize }, initOverrides);
        return await response.value();
    }

    /**
     * Update a permission by ID.
     * Update
     */
    async updateApiPermissionsPermissionIdPutRaw(requestParameters: UpdateApiPermissionsPermissionIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PermissionResponse>> {
        if (requestParameters['permissionId'] == null) {
            throw new runtime.RequiredError(
                'permissionId',
                'Required parameter "permissionId" was null or undefined when calling updateApiPermissionsPermissionIdPut().'
            );
        }

        if (requestParameters['permissionUpdate'] == null) {
            throw new runtime.RequiredError(
                'permissionUpdate',
                'Required parameter "permissionUpdate" was null or undefined when calling updateApiPermissionsPermissionIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/permissions/{permission_id}`.replace(`{${"permission_id"}}`, encodeURIComponent(String(requestParameters['permissionId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PermissionUpdateToJSON(requestParameters['permissionUpdate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PermissionResponseFromJSON(jsonValue));
    }

    /**
     * Update a permission by ID.
     * Update
     */
    async updateApiPermissionsPermissionIdPut(permissionId: string, permissionUpdate: PermissionUpdate, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PermissionResponse> {
        const response = await this.updateApiPermissionsPermissionIdPutRaw({ permissionId: permissionId, permissionUpdate: permissionUpdate }, initOverrides);
        return await response.value();
    }

}
