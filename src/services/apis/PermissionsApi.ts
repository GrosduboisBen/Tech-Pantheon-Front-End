// tslint:disable
/**
 * Project Manager ( Portfolio )
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
    HTTPValidationError,
    PermissionCreate,
    PermissionListResponse,
    PermissionResponse,
    PermissionUpdate,
} from '../models';

export interface CreateApiPermissionsPostRequest {
    permissionCreate: PermissionCreate;
}

export interface DeleteApiPermissionsPermissionIdDeleteRequest {
    permissionId: string;
}

export interface ReadPermissionApiPermissionsPermissionIdGetRequest {
    permissionId: string;
}

export interface ReadPermissionsApiPermissionsGetRequest {
    page?: number;
    pageSize?: number;
}

export interface UpdateApiPermissionsPermissionIdPutRequest {
    permissionId: string;
    permissionUpdate: PermissionUpdate;
}

/**
 * no description
 */
export class PermissionsApi extends BaseAPI {

    /**
     * Create a new permission.
     * Create
     */
    createApiPermissionsPost({ permissionCreate }: CreateApiPermissionsPostRequest): Observable<PermissionResponse>
    createApiPermissionsPost({ permissionCreate }: CreateApiPermissionsPostRequest, opts?: OperationOpts): Observable<AjaxResponse<PermissionResponse>>
    createApiPermissionsPost({ permissionCreate }: CreateApiPermissionsPostRequest, opts?: OperationOpts): Observable<PermissionResponse | AjaxResponse<PermissionResponse>> {
        throwIfNullOrUndefined(permissionCreate, 'permissionCreate', 'createApiPermissionsPost');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<PermissionResponse>({
            url: '/api/permissions/',
            method: 'POST',
            headers,
            body: permissionCreate,
        }, opts?.responseOpts);
    };

    /**
     * Delete a permission by ID.
     * Delete
     */
    deleteApiPermissionsPermissionIdDelete({ permissionId }: DeleteApiPermissionsPermissionIdDeleteRequest): Observable<any>
    deleteApiPermissionsPermissionIdDelete({ permissionId }: DeleteApiPermissionsPermissionIdDeleteRequest, opts?: OperationOpts): Observable<AjaxResponse<any>>
    deleteApiPermissionsPermissionIdDelete({ permissionId }: DeleteApiPermissionsPermissionIdDeleteRequest, opts?: OperationOpts): Observable<any | AjaxResponse<any>> {
        throwIfNullOrUndefined(permissionId, 'permissionId', 'deleteApiPermissionsPermissionIdDelete');

        return this.request<any>({
            url: '/api/permissions/{permission_id}'.replace('{permission_id}', encodeURI(permissionId)),
            method: 'DELETE',
        }, opts?.responseOpts);
    };

    /**
     * Retrieve a permission by ID.
     * Read Permission
     */
    readPermissionApiPermissionsPermissionIdGet({ permissionId }: ReadPermissionApiPermissionsPermissionIdGetRequest): Observable<PermissionResponse>
    readPermissionApiPermissionsPermissionIdGet({ permissionId }: ReadPermissionApiPermissionsPermissionIdGetRequest, opts?: OperationOpts): Observable<AjaxResponse<PermissionResponse>>
    readPermissionApiPermissionsPermissionIdGet({ permissionId }: ReadPermissionApiPermissionsPermissionIdGetRequest, opts?: OperationOpts): Observable<PermissionResponse | AjaxResponse<PermissionResponse>> {
        throwIfNullOrUndefined(permissionId, 'permissionId', 'readPermissionApiPermissionsPermissionIdGet');

        return this.request<PermissionResponse>({
            url: '/api/permissions/{permission_id}'.replace('{permission_id}', encodeURI(permissionId)),
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     * Retrieve a list of permissions with pagination.
     * Read Permissions
     */
    readPermissionsApiPermissionsGet({ page, pageSize }: ReadPermissionsApiPermissionsGetRequest): Observable<PermissionListResponse>
    readPermissionsApiPermissionsGet({ page, pageSize }: ReadPermissionsApiPermissionsGetRequest, opts?: OperationOpts): Observable<AjaxResponse<PermissionListResponse>>
    readPermissionsApiPermissionsGet({ page, pageSize }: ReadPermissionsApiPermissionsGetRequest, opts?: OperationOpts): Observable<PermissionListResponse | AjaxResponse<PermissionListResponse>> {

        const query: HttpQuery = {};

        if (page != null) { query['page'] = page; }
        if (pageSize != null) { query['page_size'] = pageSize; }

        return this.request<PermissionListResponse>({
            url: '/api/permissions/',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Update a permission by ID.
     * Update
     */
    updateApiPermissionsPermissionIdPut({ permissionId, permissionUpdate }: UpdateApiPermissionsPermissionIdPutRequest): Observable<PermissionResponse>
    updateApiPermissionsPermissionIdPut({ permissionId, permissionUpdate }: UpdateApiPermissionsPermissionIdPutRequest, opts?: OperationOpts): Observable<AjaxResponse<PermissionResponse>>
    updateApiPermissionsPermissionIdPut({ permissionId, permissionUpdate }: UpdateApiPermissionsPermissionIdPutRequest, opts?: OperationOpts): Observable<PermissionResponse | AjaxResponse<PermissionResponse>> {
        throwIfNullOrUndefined(permissionId, 'permissionId', 'updateApiPermissionsPermissionIdPut');
        throwIfNullOrUndefined(permissionUpdate, 'permissionUpdate', 'updateApiPermissionsPermissionIdPut');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<PermissionResponse>({
            url: '/api/permissions/{permission_id}'.replace('{permission_id}', encodeURI(permissionId)),
            method: 'PUT',
            headers,
            body: permissionUpdate,
        }, opts?.responseOpts);
    };

}
