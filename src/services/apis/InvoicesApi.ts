// tslint:disable
/**
 * Project Manager ( Portfolio )
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
    HTTPValidationError,
    InvoiceCreate,
    InvoiceListResponse,
    InvoiceResponse,
    InvoiceUpdate,
} from '../models';

export interface CreateApiInvoicesPostRequest {
    invoiceCreate: InvoiceCreate;
}

export interface DeleteApiInvoicesInvoiceIdDeleteRequest {
    invoiceId: string;
}

export interface ReadInvoiceApiInvoicesInvoiceIdGetRequest {
    invoiceId: string;
}

export interface ReadInvoicesApiInvoicesGetRequest {
    page?: number;
    pageSize?: number;
}

export interface UpdateApiInvoicesInvoiceIdPutRequest {
    invoiceId: string;
    invoiceUpdate: InvoiceUpdate;
}

/**
 * no description
 */
export class InvoicesApi extends BaseAPI {

    /**
     * Create a new invoice.
     * Create
     */
    createApiInvoicesPost({ invoiceCreate }: CreateApiInvoicesPostRequest): Observable<InvoiceResponse>
    createApiInvoicesPost({ invoiceCreate }: CreateApiInvoicesPostRequest, opts?: OperationOpts): Observable<AjaxResponse<InvoiceResponse>>
    createApiInvoicesPost({ invoiceCreate }: CreateApiInvoicesPostRequest, opts?: OperationOpts): Observable<InvoiceResponse | AjaxResponse<InvoiceResponse>> {
        throwIfNullOrUndefined(invoiceCreate, 'invoiceCreate', 'createApiInvoicesPost');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<InvoiceResponse>({
            url: '/api/invoices/',
            method: 'POST',
            headers,
            body: invoiceCreate,
        }, opts?.responseOpts);
    };

    /**
     * Delete an invoice by ID.
     * Delete
     */
    deleteApiInvoicesInvoiceIdDelete({ invoiceId }: DeleteApiInvoicesInvoiceIdDeleteRequest): Observable<any>
    deleteApiInvoicesInvoiceIdDelete({ invoiceId }: DeleteApiInvoicesInvoiceIdDeleteRequest, opts?: OperationOpts): Observable<AjaxResponse<any>>
    deleteApiInvoicesInvoiceIdDelete({ invoiceId }: DeleteApiInvoicesInvoiceIdDeleteRequest, opts?: OperationOpts): Observable<any | AjaxResponse<any>> {
        throwIfNullOrUndefined(invoiceId, 'invoiceId', 'deleteApiInvoicesInvoiceIdDelete');

        return this.request<any>({
            url: '/api/invoices/{invoice_id}'.replace('{invoice_id}', encodeURI(invoiceId)),
            method: 'DELETE',
        }, opts?.responseOpts);
    };

    /**
     * Retrieve an invoice by ID.
     * Read Invoice
     */
    readInvoiceApiInvoicesInvoiceIdGet({ invoiceId }: ReadInvoiceApiInvoicesInvoiceIdGetRequest): Observable<InvoiceResponse>
    readInvoiceApiInvoicesInvoiceIdGet({ invoiceId }: ReadInvoiceApiInvoicesInvoiceIdGetRequest, opts?: OperationOpts): Observable<AjaxResponse<InvoiceResponse>>
    readInvoiceApiInvoicesInvoiceIdGet({ invoiceId }: ReadInvoiceApiInvoicesInvoiceIdGetRequest, opts?: OperationOpts): Observable<InvoiceResponse | AjaxResponse<InvoiceResponse>> {
        throwIfNullOrUndefined(invoiceId, 'invoiceId', 'readInvoiceApiInvoicesInvoiceIdGet');

        return this.request<InvoiceResponse>({
            url: '/api/invoices/{invoice_id}'.replace('{invoice_id}', encodeURI(invoiceId)),
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     * Retrieve a list of invoices with pagination.
     * Read Invoices
     */
    readInvoicesApiInvoicesGet({ page, pageSize }: ReadInvoicesApiInvoicesGetRequest): Observable<InvoiceListResponse>
    readInvoicesApiInvoicesGet({ page, pageSize }: ReadInvoicesApiInvoicesGetRequest, opts?: OperationOpts): Observable<AjaxResponse<InvoiceListResponse>>
    readInvoicesApiInvoicesGet({ page, pageSize }: ReadInvoicesApiInvoicesGetRequest, opts?: OperationOpts): Observable<InvoiceListResponse | AjaxResponse<InvoiceListResponse>> {

        const query: HttpQuery = {};

        if (page != null) { query['page'] = page; }
        if (pageSize != null) { query['page_size'] = pageSize; }

        return this.request<InvoiceListResponse>({
            url: '/api/invoices/',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Update an invoice by ID.
     * Update
     */
    updateApiInvoicesInvoiceIdPut({ invoiceId, invoiceUpdate }: UpdateApiInvoicesInvoiceIdPutRequest): Observable<InvoiceResponse>
    updateApiInvoicesInvoiceIdPut({ invoiceId, invoiceUpdate }: UpdateApiInvoicesInvoiceIdPutRequest, opts?: OperationOpts): Observable<AjaxResponse<InvoiceResponse>>
    updateApiInvoicesInvoiceIdPut({ invoiceId, invoiceUpdate }: UpdateApiInvoicesInvoiceIdPutRequest, opts?: OperationOpts): Observable<InvoiceResponse | AjaxResponse<InvoiceResponse>> {
        throwIfNullOrUndefined(invoiceId, 'invoiceId', 'updateApiInvoicesInvoiceIdPut');
        throwIfNullOrUndefined(invoiceUpdate, 'invoiceUpdate', 'updateApiInvoicesInvoiceIdPut');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<InvoiceResponse>({
            url: '/api/invoices/{invoice_id}'.replace('{invoice_id}', encodeURI(invoiceId)),
            method: 'PUT',
            headers,
            body: invoiceUpdate,
        }, opts?.responseOpts);
    };

}
