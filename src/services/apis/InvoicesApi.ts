/* tslint:disable */
/* eslint-disable */
/**
 * Project Manager ( Portfolio )
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  InvoiceCreate,
  InvoiceListResponse,
  InvoiceResponse,
  InvoiceUpdate,
} from '../models/index';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    InvoiceCreateFromJSON,
    InvoiceCreateToJSON,
    InvoiceListResponseFromJSON,
    InvoiceListResponseToJSON,
    InvoiceResponseFromJSON,
    InvoiceResponseToJSON,
    InvoiceUpdateFromJSON,
    InvoiceUpdateToJSON,
} from '../models/index';

export interface CreateApiInvoicesPostRequest {
    invoiceCreate: InvoiceCreate;
}

export interface DeleteApiInvoicesInvoiceIdDeleteRequest {
    invoiceId: string;
}

export interface ReadInvoiceApiInvoicesInvoiceIdGetRequest {
    invoiceId: string;
}

export interface ReadInvoicesApiInvoicesGetRequest {
    page?: number;
    pageSize?: number;
}

export interface UpdateApiInvoicesInvoiceIdPutRequest {
    invoiceId: string;
    invoiceUpdate: InvoiceUpdate;
}

/**
 * InvoicesApi - interface
 * 
 * @export
 * @interface InvoicesApiInterface
 */
export interface InvoicesApiInterface {
    /**
     * Create a new invoice.
     * @summary Create
     * @param {InvoiceCreate} invoiceCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoicesApiInterface
     */
    createApiInvoicesPostRaw(requestParameters: CreateApiInvoicesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InvoiceResponse>>;

    /**
     * Create a new invoice.
     * Create
     */
    createApiInvoicesPost(invoiceCreate: InvoiceCreate, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InvoiceResponse>;

    /**
     * Delete an invoice by ID.
     * @summary Delete
     * @param {string} invoiceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoicesApiInterface
     */
    deleteApiInvoicesInvoiceIdDeleteRaw(requestParameters: DeleteApiInvoicesInvoiceIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * Delete an invoice by ID.
     * Delete
     */
    deleteApiInvoicesInvoiceIdDelete(invoiceId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * Retrieve an invoice by ID.
     * @summary Read Invoice
     * @param {string} invoiceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoicesApiInterface
     */
    readInvoiceApiInvoicesInvoiceIdGetRaw(requestParameters: ReadInvoiceApiInvoicesInvoiceIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InvoiceResponse>>;

    /**
     * Retrieve an invoice by ID.
     * Read Invoice
     */
    readInvoiceApiInvoicesInvoiceIdGet(invoiceId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InvoiceResponse>;

    /**
     * Retrieve a list of invoices with pagination.
     * @summary Read Invoices
     * @param {number} [page] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoicesApiInterface
     */
    readInvoicesApiInvoicesGetRaw(requestParameters: ReadInvoicesApiInvoicesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InvoiceListResponse>>;

    /**
     * Retrieve a list of invoices with pagination.
     * Read Invoices
     */
    readInvoicesApiInvoicesGet(page?: number, pageSize?: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InvoiceListResponse>;

    /**
     * Update an invoice by ID.
     * @summary Update
     * @param {string} invoiceId 
     * @param {InvoiceUpdate} invoiceUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoicesApiInterface
     */
    updateApiInvoicesInvoiceIdPutRaw(requestParameters: UpdateApiInvoicesInvoiceIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InvoiceResponse>>;

    /**
     * Update an invoice by ID.
     * Update
     */
    updateApiInvoicesInvoiceIdPut(invoiceId: string, invoiceUpdate: InvoiceUpdate, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InvoiceResponse>;

}

/**
 * 
 */
export class InvoicesApi extends runtime.BaseAPI implements InvoicesApiInterface {

    /**
     * Create a new invoice.
     * Create
     */
    async createApiInvoicesPostRaw(requestParameters: CreateApiInvoicesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InvoiceResponse>> {
        if (requestParameters['invoiceCreate'] == null) {
            throw new runtime.RequiredError(
                'invoiceCreate',
                'Required parameter "invoiceCreate" was null or undefined when calling createApiInvoicesPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/invoices/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InvoiceCreateToJSON(requestParameters['invoiceCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InvoiceResponseFromJSON(jsonValue));
    }

    /**
     * Create a new invoice.
     * Create
     */
    async createApiInvoicesPost(invoiceCreate: InvoiceCreate, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InvoiceResponse> {
        const response = await this.createApiInvoicesPostRaw({ invoiceCreate: invoiceCreate }, initOverrides);
        return await response.value();
    }

    /**
     * Delete an invoice by ID.
     * Delete
     */
    async deleteApiInvoicesInvoiceIdDeleteRaw(requestParameters: DeleteApiInvoicesInvoiceIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['invoiceId'] == null) {
            throw new runtime.RequiredError(
                'invoiceId',
                'Required parameter "invoiceId" was null or undefined when calling deleteApiInvoicesInvoiceIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/invoices/{invoice_id}`.replace(`{${"invoice_id"}}`, encodeURIComponent(String(requestParameters['invoiceId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Delete an invoice by ID.
     * Delete
     */
    async deleteApiInvoicesInvoiceIdDelete(invoiceId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.deleteApiInvoicesInvoiceIdDeleteRaw({ invoiceId: invoiceId }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve an invoice by ID.
     * Read Invoice
     */
    async readInvoiceApiInvoicesInvoiceIdGetRaw(requestParameters: ReadInvoiceApiInvoicesInvoiceIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InvoiceResponse>> {
        if (requestParameters['invoiceId'] == null) {
            throw new runtime.RequiredError(
                'invoiceId',
                'Required parameter "invoiceId" was null or undefined when calling readInvoiceApiInvoicesInvoiceIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/invoices/{invoice_id}`.replace(`{${"invoice_id"}}`, encodeURIComponent(String(requestParameters['invoiceId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InvoiceResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve an invoice by ID.
     * Read Invoice
     */
    async readInvoiceApiInvoicesInvoiceIdGet(invoiceId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InvoiceResponse> {
        const response = await this.readInvoiceApiInvoicesInvoiceIdGetRaw({ invoiceId: invoiceId }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of invoices with pagination.
     * Read Invoices
     */
    async readInvoicesApiInvoicesGetRaw(requestParameters: ReadInvoicesApiInvoicesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InvoiceListResponse>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/invoices/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InvoiceListResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve a list of invoices with pagination.
     * Read Invoices
     */
    async readInvoicesApiInvoicesGet(page?: number, pageSize?: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InvoiceListResponse> {
        const response = await this.readInvoicesApiInvoicesGetRaw({ page: page, pageSize: pageSize }, initOverrides);
        return await response.value();
    }

    /**
     * Update an invoice by ID.
     * Update
     */
    async updateApiInvoicesInvoiceIdPutRaw(requestParameters: UpdateApiInvoicesInvoiceIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InvoiceResponse>> {
        if (requestParameters['invoiceId'] == null) {
            throw new runtime.RequiredError(
                'invoiceId',
                'Required parameter "invoiceId" was null or undefined when calling updateApiInvoicesInvoiceIdPut().'
            );
        }

        if (requestParameters['invoiceUpdate'] == null) {
            throw new runtime.RequiredError(
                'invoiceUpdate',
                'Required parameter "invoiceUpdate" was null or undefined when calling updateApiInvoicesInvoiceIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/invoices/{invoice_id}`.replace(`{${"invoice_id"}}`, encodeURIComponent(String(requestParameters['invoiceId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: InvoiceUpdateToJSON(requestParameters['invoiceUpdate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InvoiceResponseFromJSON(jsonValue));
    }

    /**
     * Update an invoice by ID.
     * Update
     */
    async updateApiInvoicesInvoiceIdPut(invoiceId: string, invoiceUpdate: InvoiceUpdate, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InvoiceResponse> {
        const response = await this.updateApiInvoicesInvoiceIdPutRaw({ invoiceId: invoiceId, invoiceUpdate: invoiceUpdate }, initOverrides);
        return await response.value();
    }

}
