// tslint:disable
/**
 * Project Manager ( Portfolio )
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
    AvailabilityCalendarCreate,
    AvailabilityCalendarListResponse,
    AvailabilityCalendarResponse,
    AvailabilityCalendarUpdate,
    HTTPValidationError,
} from '../models';

export interface CreateApiCalendarsPostRequest {
    availabilityCalendarCreate: AvailabilityCalendarCreate;
}

export interface DeleteApiCalendarsAvailabilityIdDeleteRequest {
    availabilityId: string;
}

export interface ListAvailabilitiesApiCalendarsGetRequest {
    page?: number;
    pageSize?: number;
}

export interface ReadAvailabilityApiCalendarsAvailabilityIdGetRequest {
    availabilityId: string;
}

export interface UpdateApiCalendarsAvailabilityIdPutRequest {
    availabilityId: string;
    availabilityCalendarUpdate: AvailabilityCalendarUpdate;
}

/**
 * no description
 */
export class CalendarsApi extends BaseAPI {

    /**
     * Create a new availability entry.
     * Create
     */
    createApiCalendarsPost({ availabilityCalendarCreate }: CreateApiCalendarsPostRequest): Observable<AvailabilityCalendarResponse>
    createApiCalendarsPost({ availabilityCalendarCreate }: CreateApiCalendarsPostRequest, opts?: OperationOpts): Observable<AjaxResponse<AvailabilityCalendarResponse>>
    createApiCalendarsPost({ availabilityCalendarCreate }: CreateApiCalendarsPostRequest, opts?: OperationOpts): Observable<AvailabilityCalendarResponse | AjaxResponse<AvailabilityCalendarResponse>> {
        throwIfNullOrUndefined(availabilityCalendarCreate, 'availabilityCalendarCreate', 'createApiCalendarsPost');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<AvailabilityCalendarResponse>({
            url: '/api/calendars/',
            method: 'POST',
            headers,
            body: availabilityCalendarCreate,
        }, opts?.responseOpts);
    };

    /**
     * Delete a specific availability entry by ID.
     * Delete
     */
    deleteApiCalendarsAvailabilityIdDelete({ availabilityId }: DeleteApiCalendarsAvailabilityIdDeleteRequest): Observable<any>
    deleteApiCalendarsAvailabilityIdDelete({ availabilityId }: DeleteApiCalendarsAvailabilityIdDeleteRequest, opts?: OperationOpts): Observable<AjaxResponse<any>>
    deleteApiCalendarsAvailabilityIdDelete({ availabilityId }: DeleteApiCalendarsAvailabilityIdDeleteRequest, opts?: OperationOpts): Observable<any | AjaxResponse<any>> {
        throwIfNullOrUndefined(availabilityId, 'availabilityId', 'deleteApiCalendarsAvailabilityIdDelete');

        return this.request<any>({
            url: '/api/calendars/{availability_id}'.replace('{availability_id}', encodeURI(availabilityId)),
            method: 'DELETE',
        }, opts?.responseOpts);
    };

    /**
     * List all availability entries with pagination.
     * List Availabilities
     */
    listAvailabilitiesApiCalendarsGet({ page, pageSize }: ListAvailabilitiesApiCalendarsGetRequest): Observable<AvailabilityCalendarListResponse>
    listAvailabilitiesApiCalendarsGet({ page, pageSize }: ListAvailabilitiesApiCalendarsGetRequest, opts?: OperationOpts): Observable<AjaxResponse<AvailabilityCalendarListResponse>>
    listAvailabilitiesApiCalendarsGet({ page, pageSize }: ListAvailabilitiesApiCalendarsGetRequest, opts?: OperationOpts): Observable<AvailabilityCalendarListResponse | AjaxResponse<AvailabilityCalendarListResponse>> {

        const query: HttpQuery = {};

        if (page != null) { query['page'] = page; }
        if (pageSize != null) { query['page_size'] = pageSize; }

        return this.request<AvailabilityCalendarListResponse>({
            url: '/api/calendars/',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Get a specific availability entry by ID.
     * Read Availability
     */
    readAvailabilityApiCalendarsAvailabilityIdGet({ availabilityId }: ReadAvailabilityApiCalendarsAvailabilityIdGetRequest): Observable<AvailabilityCalendarResponse>
    readAvailabilityApiCalendarsAvailabilityIdGet({ availabilityId }: ReadAvailabilityApiCalendarsAvailabilityIdGetRequest, opts?: OperationOpts): Observable<AjaxResponse<AvailabilityCalendarResponse>>
    readAvailabilityApiCalendarsAvailabilityIdGet({ availabilityId }: ReadAvailabilityApiCalendarsAvailabilityIdGetRequest, opts?: OperationOpts): Observable<AvailabilityCalendarResponse | AjaxResponse<AvailabilityCalendarResponse>> {
        throwIfNullOrUndefined(availabilityId, 'availabilityId', 'readAvailabilityApiCalendarsAvailabilityIdGet');

        return this.request<AvailabilityCalendarResponse>({
            url: '/api/calendars/{availability_id}'.replace('{availability_id}', encodeURI(availabilityId)),
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     * Update a specific availability entry by ID.
     * Update
     */
    updateApiCalendarsAvailabilityIdPut({ availabilityId, availabilityCalendarUpdate }: UpdateApiCalendarsAvailabilityIdPutRequest): Observable<AvailabilityCalendarResponse>
    updateApiCalendarsAvailabilityIdPut({ availabilityId, availabilityCalendarUpdate }: UpdateApiCalendarsAvailabilityIdPutRequest, opts?: OperationOpts): Observable<AjaxResponse<AvailabilityCalendarResponse>>
    updateApiCalendarsAvailabilityIdPut({ availabilityId, availabilityCalendarUpdate }: UpdateApiCalendarsAvailabilityIdPutRequest, opts?: OperationOpts): Observable<AvailabilityCalendarResponse | AjaxResponse<AvailabilityCalendarResponse>> {
        throwIfNullOrUndefined(availabilityId, 'availabilityId', 'updateApiCalendarsAvailabilityIdPut');
        throwIfNullOrUndefined(availabilityCalendarUpdate, 'availabilityCalendarUpdate', 'updateApiCalendarsAvailabilityIdPut');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<AvailabilityCalendarResponse>({
            url: '/api/calendars/{availability_id}'.replace('{availability_id}', encodeURI(availabilityId)),
            method: 'PUT',
            headers,
            body: availabilityCalendarUpdate,
        }, opts?.responseOpts);
    };

}
