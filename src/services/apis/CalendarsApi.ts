/* tslint:disable */
/* eslint-disable */
/**
 * Project Manager ( Portfolio )
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AvailabilityCalendarCreate,
  AvailabilityCalendarListResponse,
  AvailabilityCalendarResponse,
  AvailabilityCalendarUpdate,
  HTTPValidationError,
} from '../models/index';
import {
    AvailabilityCalendarCreateFromJSON,
    AvailabilityCalendarCreateToJSON,
    AvailabilityCalendarListResponseFromJSON,
    AvailabilityCalendarListResponseToJSON,
    AvailabilityCalendarResponseFromJSON,
    AvailabilityCalendarResponseToJSON,
    AvailabilityCalendarUpdateFromJSON,
    AvailabilityCalendarUpdateToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
} from '../models/index';

export interface CreateApiCalendarsPostRequest {
    availabilityCalendarCreate: AvailabilityCalendarCreate;
}

export interface DeleteApiCalendarsAvailabilityIdDeleteRequest {
    availabilityId: string;
}

export interface ListAvailabilitiesApiCalendarsGetRequest {
    page?: number;
    pageSize?: number;
}

export interface ReadAvailabilityApiCalendarsAvailabilityIdGetRequest {
    availabilityId: string;
}

export interface UpdateApiCalendarsAvailabilityIdPutRequest {
    availabilityId: string;
    availabilityCalendarUpdate: AvailabilityCalendarUpdate;
}

/**
 * CalendarsApi - interface
 * 
 * @export
 * @interface CalendarsApiInterface
 */
export interface CalendarsApiInterface {
    /**
     * Create a new availability entry.
     * @summary Create
     * @param {AvailabilityCalendarCreate} availabilityCalendarCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CalendarsApiInterface
     */
    createApiCalendarsPostRaw(requestParameters: CreateApiCalendarsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AvailabilityCalendarResponse>>;

    /**
     * Create a new availability entry.
     * Create
     */
    createApiCalendarsPost(availabilityCalendarCreate: AvailabilityCalendarCreate, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AvailabilityCalendarResponse>;

    /**
     * Delete a specific availability entry by ID.
     * @summary Delete
     * @param {string} availabilityId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CalendarsApiInterface
     */
    deleteApiCalendarsAvailabilityIdDeleteRaw(requestParameters: DeleteApiCalendarsAvailabilityIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * Delete a specific availability entry by ID.
     * Delete
     */
    deleteApiCalendarsAvailabilityIdDelete(availabilityId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * List all availability entries with pagination.
     * @summary List Availabilities
     * @param {number} [page] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CalendarsApiInterface
     */
    listAvailabilitiesApiCalendarsGetRaw(requestParameters: ListAvailabilitiesApiCalendarsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AvailabilityCalendarListResponse>>;

    /**
     * List all availability entries with pagination.
     * List Availabilities
     */
    listAvailabilitiesApiCalendarsGet(page?: number, pageSize?: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AvailabilityCalendarListResponse>;

    /**
     * Get a specific availability entry by ID.
     * @summary Read Availability
     * @param {string} availabilityId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CalendarsApiInterface
     */
    readAvailabilityApiCalendarsAvailabilityIdGetRaw(requestParameters: ReadAvailabilityApiCalendarsAvailabilityIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AvailabilityCalendarResponse>>;

    /**
     * Get a specific availability entry by ID.
     * Read Availability
     */
    readAvailabilityApiCalendarsAvailabilityIdGet(availabilityId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AvailabilityCalendarResponse>;

    /**
     * Update a specific availability entry by ID.
     * @summary Update
     * @param {string} availabilityId 
     * @param {AvailabilityCalendarUpdate} availabilityCalendarUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CalendarsApiInterface
     */
    updateApiCalendarsAvailabilityIdPutRaw(requestParameters: UpdateApiCalendarsAvailabilityIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AvailabilityCalendarResponse>>;

    /**
     * Update a specific availability entry by ID.
     * Update
     */
    updateApiCalendarsAvailabilityIdPut(availabilityId: string, availabilityCalendarUpdate: AvailabilityCalendarUpdate, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AvailabilityCalendarResponse>;

}

/**
 * 
 */
export class CalendarsApi extends runtime.BaseAPI implements CalendarsApiInterface {

    /**
     * Create a new availability entry.
     * Create
     */
    async createApiCalendarsPostRaw(requestParameters: CreateApiCalendarsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AvailabilityCalendarResponse>> {
        if (requestParameters['availabilityCalendarCreate'] == null) {
            throw new runtime.RequiredError(
                'availabilityCalendarCreate',
                'Required parameter "availabilityCalendarCreate" was null or undefined when calling createApiCalendarsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/calendars/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AvailabilityCalendarCreateToJSON(requestParameters['availabilityCalendarCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AvailabilityCalendarResponseFromJSON(jsonValue));
    }

    /**
     * Create a new availability entry.
     * Create
     */
    async createApiCalendarsPost(availabilityCalendarCreate: AvailabilityCalendarCreate, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AvailabilityCalendarResponse> {
        const response = await this.createApiCalendarsPostRaw({ availabilityCalendarCreate: availabilityCalendarCreate }, initOverrides);
        return await response.value();
    }

    /**
     * Delete a specific availability entry by ID.
     * Delete
     */
    async deleteApiCalendarsAvailabilityIdDeleteRaw(requestParameters: DeleteApiCalendarsAvailabilityIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['availabilityId'] == null) {
            throw new runtime.RequiredError(
                'availabilityId',
                'Required parameter "availabilityId" was null or undefined when calling deleteApiCalendarsAvailabilityIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/calendars/{availability_id}`.replace(`{${"availability_id"}}`, encodeURIComponent(String(requestParameters['availabilityId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Delete a specific availability entry by ID.
     * Delete
     */
    async deleteApiCalendarsAvailabilityIdDelete(availabilityId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.deleteApiCalendarsAvailabilityIdDeleteRaw({ availabilityId: availabilityId }, initOverrides);
        return await response.value();
    }

    /**
     * List all availability entries with pagination.
     * List Availabilities
     */
    async listAvailabilitiesApiCalendarsGetRaw(requestParameters: ListAvailabilitiesApiCalendarsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AvailabilityCalendarListResponse>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/calendars/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AvailabilityCalendarListResponseFromJSON(jsonValue));
    }

    /**
     * List all availability entries with pagination.
     * List Availabilities
     */
    async listAvailabilitiesApiCalendarsGet(page?: number, pageSize?: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AvailabilityCalendarListResponse> {
        const response = await this.listAvailabilitiesApiCalendarsGetRaw({ page: page, pageSize: pageSize }, initOverrides);
        return await response.value();
    }

    /**
     * Get a specific availability entry by ID.
     * Read Availability
     */
    async readAvailabilityApiCalendarsAvailabilityIdGetRaw(requestParameters: ReadAvailabilityApiCalendarsAvailabilityIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AvailabilityCalendarResponse>> {
        if (requestParameters['availabilityId'] == null) {
            throw new runtime.RequiredError(
                'availabilityId',
                'Required parameter "availabilityId" was null or undefined when calling readAvailabilityApiCalendarsAvailabilityIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/calendars/{availability_id}`.replace(`{${"availability_id"}}`, encodeURIComponent(String(requestParameters['availabilityId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AvailabilityCalendarResponseFromJSON(jsonValue));
    }

    /**
     * Get a specific availability entry by ID.
     * Read Availability
     */
    async readAvailabilityApiCalendarsAvailabilityIdGet(availabilityId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AvailabilityCalendarResponse> {
        const response = await this.readAvailabilityApiCalendarsAvailabilityIdGetRaw({ availabilityId: availabilityId }, initOverrides);
        return await response.value();
    }

    /**
     * Update a specific availability entry by ID.
     * Update
     */
    async updateApiCalendarsAvailabilityIdPutRaw(requestParameters: UpdateApiCalendarsAvailabilityIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AvailabilityCalendarResponse>> {
        if (requestParameters['availabilityId'] == null) {
            throw new runtime.RequiredError(
                'availabilityId',
                'Required parameter "availabilityId" was null or undefined when calling updateApiCalendarsAvailabilityIdPut().'
            );
        }

        if (requestParameters['availabilityCalendarUpdate'] == null) {
            throw new runtime.RequiredError(
                'availabilityCalendarUpdate',
                'Required parameter "availabilityCalendarUpdate" was null or undefined when calling updateApiCalendarsAvailabilityIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/calendars/{availability_id}`.replace(`{${"availability_id"}}`, encodeURIComponent(String(requestParameters['availabilityId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AvailabilityCalendarUpdateToJSON(requestParameters['availabilityCalendarUpdate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AvailabilityCalendarResponseFromJSON(jsonValue));
    }

    /**
     * Update a specific availability entry by ID.
     * Update
     */
    async updateApiCalendarsAvailabilityIdPut(availabilityId: string, availabilityCalendarUpdate: AvailabilityCalendarUpdate, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AvailabilityCalendarResponse> {
        const response = await this.updateApiCalendarsAvailabilityIdPutRaw({ availabilityId: availabilityId, availabilityCalendarUpdate: availabilityCalendarUpdate }, initOverrides);
        return await response.value();
    }

}
