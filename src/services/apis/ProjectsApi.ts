// tslint:disable
/**
 * Project Manager ( Portfolio )
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
    HTTPValidationError,
    ProjectCreate,
    ProjectListResponse,
    ProjectResponse,
    ProjectStatusEnum,
    ProjectUpdate,
} from '../models';

export interface CreateApiProjectsPostRequest {
    projectCreate: ProjectCreate;
}

export interface DeleteApiProjectsProjectIdDeleteRequest {
    projectId: string;
}

export interface ListProjectsApiProjectsGetRequest {
    page?: number;
    pageSize?: number;
    clientId?: string | null;
    handlerId?: string | null;
    title?: string | null;
    startDate?: string | null;
    endDate?: string | null;
    totalPriceMin?: number | null;
    totalPriceMax?: number | null;
    status?: ProjectStatusEnum | null;
}

export interface ReadProjectApiProjectsHandlerHandlerIdGetRequest {
    handlerId: string;
    page?: number | null;
    pageSize?: number | null;
    clientId?: string | null;
    title?: string | null;
    startDate?: string | null;
    endDate?: string | null;
    totalPriceMin?: number | null;
    totalPriceMax?: number | null;
    status?: ProjectStatusEnum | null;
}

export interface ReadProjectApiProjectsProjectIdGetRequest {
    projectId: string;
}

export interface UpdateApiProjectsProjectIdPutRequest {
    projectId: string;
    projectUpdate: ProjectUpdate;
}

/**
 * no description
 */
export class ProjectsApi extends BaseAPI {

    /**
     * Create a new project.
     * Create
     */
    createApiProjectsPost({ projectCreate }: CreateApiProjectsPostRequest): Observable<ProjectResponse>
    createApiProjectsPost({ projectCreate }: CreateApiProjectsPostRequest, opts?: OperationOpts): Observable<AjaxResponse<ProjectResponse>>
    createApiProjectsPost({ projectCreate }: CreateApiProjectsPostRequest, opts?: OperationOpts): Observable<ProjectResponse | AjaxResponse<ProjectResponse>> {
        throwIfNullOrUndefined(projectCreate, 'projectCreate', 'createApiProjectsPost');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<ProjectResponse>({
            url: '/api/projects/',
            method: 'POST',
            headers,
            body: projectCreate,
        }, opts?.responseOpts);
    };

    /**
     * Delete a project by ID.
     * Delete
     */
    deleteApiProjectsProjectIdDelete({ projectId }: DeleteApiProjectsProjectIdDeleteRequest): Observable<any>
    deleteApiProjectsProjectIdDelete({ projectId }: DeleteApiProjectsProjectIdDeleteRequest, opts?: OperationOpts): Observable<AjaxResponse<any>>
    deleteApiProjectsProjectIdDelete({ projectId }: DeleteApiProjectsProjectIdDeleteRequest, opts?: OperationOpts): Observable<any | AjaxResponse<any>> {
        throwIfNullOrUndefined(projectId, 'projectId', 'deleteApiProjectsProjectIdDelete');

        return this.request<any>({
            url: '/api/projects/{project_id}'.replace('{project_id}', encodeURI(projectId)),
            method: 'DELETE',
        }, opts?.responseOpts);
    };

    /**
     * Retrieve a list of projects with optional filters.
     * List Projects
     */
    listProjectsApiProjectsGet({ page, pageSize, clientId, handlerId, title, startDate, endDate, totalPriceMin, totalPriceMax, status }: ListProjectsApiProjectsGetRequest): Observable<ProjectListResponse>
    listProjectsApiProjectsGet({ page, pageSize, clientId, handlerId, title, startDate, endDate, totalPriceMin, totalPriceMax, status }: ListProjectsApiProjectsGetRequest, opts?: OperationOpts): Observable<AjaxResponse<ProjectListResponse>>
    listProjectsApiProjectsGet({ page, pageSize, clientId, handlerId, title, startDate, endDate, totalPriceMin, totalPriceMax, status }: ListProjectsApiProjectsGetRequest, opts?: OperationOpts): Observable<ProjectListResponse | AjaxResponse<ProjectListResponse>> {

        const query: HttpQuery = {};

        if (page != null) { query['page'] = page; }
        if (pageSize != null) { query['page_size'] = pageSize; }
        if (clientId != null) { query['client_id'] = clientId; }
        if (handlerId != null) { query['handler_id'] = handlerId; }
        if (title != null) { query['title'] = title; }
        if (startDate != null) { query['start_date'] = (startDate as any).toISOString().split('T')[0]; }
        if (endDate != null) { query['end_date'] = (endDate as any).toISOString().split('T')[0]; }
        if (totalPriceMin != null) { query['total_price_min'] = totalPriceMin; }
        if (totalPriceMax != null) { query['total_price_max'] = totalPriceMax; }
        if (status != null) { query['status'] = status; }

        return this.request<ProjectListResponse>({
            url: '/api/projects/',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve a project by handler ID.
     * Read Project
     */
    readProjectApiProjectsHandlerHandlerIdGet({ handlerId, page, pageSize, clientId, title, startDate, endDate, totalPriceMin, totalPriceMax, status }: ReadProjectApiProjectsHandlerHandlerIdGetRequest): Observable<ProjectListResponse>
    readProjectApiProjectsHandlerHandlerIdGet({ handlerId, page, pageSize, clientId, title, startDate, endDate, totalPriceMin, totalPriceMax, status }: ReadProjectApiProjectsHandlerHandlerIdGetRequest, opts?: OperationOpts): Observable<AjaxResponse<ProjectListResponse>>
    readProjectApiProjectsHandlerHandlerIdGet({ handlerId, page, pageSize, clientId, title, startDate, endDate, totalPriceMin, totalPriceMax, status }: ReadProjectApiProjectsHandlerHandlerIdGetRequest, opts?: OperationOpts): Observable<ProjectListResponse | AjaxResponse<ProjectListResponse>> {
        throwIfNullOrUndefined(handlerId, 'handlerId', 'readProjectApiProjectsHandlerHandlerIdGet');

        const query: HttpQuery = {};

        if (page != null) { query['page'] = page; }
        if (pageSize != null) { query['page_size'] = pageSize; }
        if (clientId != null) { query['client_id'] = clientId; }
        if (title != null) { query['title'] = title; }
        if (startDate != null) { query['start_date'] = (startDate as any).toISOString().split('T')[0]; }
        if (endDate != null) { query['end_date'] = (endDate as any).toISOString().split('T')[0]; }
        if (totalPriceMin != null) { query['total_price_min'] = totalPriceMin; }
        if (totalPriceMax != null) { query['total_price_max'] = totalPriceMax; }
        if (status != null) { query['status'] = status; }

        return this.request<ProjectListResponse>({
            url: '/api/projects/handler/{handler_id}'.replace('{handler_id}', encodeURI(handlerId)),
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve a project by ID.
     * Read Project
     */
    readProjectApiProjectsProjectIdGet({ projectId }: ReadProjectApiProjectsProjectIdGetRequest): Observable<ProjectListResponse>
    readProjectApiProjectsProjectIdGet({ projectId }: ReadProjectApiProjectsProjectIdGetRequest, opts?: OperationOpts): Observable<AjaxResponse<ProjectListResponse>>
    readProjectApiProjectsProjectIdGet({ projectId }: ReadProjectApiProjectsProjectIdGetRequest, opts?: OperationOpts): Observable<ProjectListResponse | AjaxResponse<ProjectListResponse>> {
        throwIfNullOrUndefined(projectId, 'projectId', 'readProjectApiProjectsProjectIdGet');

        return this.request<ProjectListResponse>({
            url: '/api/projects/{project_id}'.replace('{project_id}', encodeURI(projectId)),
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     * Update a project by ID.
     * Update
     */
    updateApiProjectsProjectIdPut({ projectId, projectUpdate }: UpdateApiProjectsProjectIdPutRequest): Observable<ProjectResponse>
    updateApiProjectsProjectIdPut({ projectId, projectUpdate }: UpdateApiProjectsProjectIdPutRequest, opts?: OperationOpts): Observable<AjaxResponse<ProjectResponse>>
    updateApiProjectsProjectIdPut({ projectId, projectUpdate }: UpdateApiProjectsProjectIdPutRequest, opts?: OperationOpts): Observable<ProjectResponse | AjaxResponse<ProjectResponse>> {
        throwIfNullOrUndefined(projectId, 'projectId', 'updateApiProjectsProjectIdPut');
        throwIfNullOrUndefined(projectUpdate, 'projectUpdate', 'updateApiProjectsProjectIdPut');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<ProjectResponse>({
            url: '/api/projects/{project_id}'.replace('{project_id}', encodeURI(projectId)),
            method: 'PUT',
            headers,
            body: projectUpdate,
        }, opts?.responseOpts);
    };

}
