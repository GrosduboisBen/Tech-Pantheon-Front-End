/* tslint:disable */
/* eslint-disable */
/**
 * Project Manager ( Portfolio )
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  ProjectCreate,
  ProjectListResponse,
  ProjectResponse,
  ProjectUpdate,
} from '../models/index';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    ProjectCreateFromJSON,
    ProjectCreateToJSON,
    ProjectListResponseFromJSON,
    ProjectListResponseToJSON,
    ProjectResponseFromJSON,
    ProjectResponseToJSON,
    ProjectUpdateFromJSON,
    ProjectUpdateToJSON,
} from '../models/index';

export interface CreateApiProjectsPostRequest {
    projectCreate: ProjectCreate;
}

export interface DeleteApiProjectsProjectIdDeleteRequest {
    projectId: string;
}

export interface ReadProjectApiProjectsProjectIdGetRequest {
    projectId: string;
}

export interface ReadProjectsApiProjectsGetRequest {
    page?: number;
    pageSize?: number;
}

export interface UpdateApiProjectsProjectIdPutRequest {
    projectId: string;
    projectUpdate: ProjectUpdate;
}

/**
 * ProjectsApi - interface
 * 
 * @export
 * @interface ProjectsApiInterface
 */
export interface ProjectsApiInterface {
    /**
     * Create a new project.
     * @summary Create
     * @param {ProjectCreate} projectCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    createApiProjectsPostRaw(requestParameters: CreateApiProjectsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectResponse>>;

    /**
     * Create a new project.
     * Create
     */
    createApiProjectsPost(projectCreate: ProjectCreate, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectResponse>;

    /**
     * Delete a project by ID.
     * @summary Delete
     * @param {string} projectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    deleteApiProjectsProjectIdDeleteRaw(requestParameters: DeleteApiProjectsProjectIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * Delete a project by ID.
     * Delete
     */
    deleteApiProjectsProjectIdDelete(projectId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * Retrieve a project by ID.
     * @summary Read Project
     * @param {string} projectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    readProjectApiProjectsProjectIdGetRaw(requestParameters: ReadProjectApiProjectsProjectIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectResponse>>;

    /**
     * Retrieve a project by ID.
     * Read Project
     */
    readProjectApiProjectsProjectIdGet(projectId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectResponse>;

    /**
     * Retrieve a list of projects with pagination.
     * @summary Read Projects
     * @param {number} [page] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    readProjectsApiProjectsGetRaw(requestParameters: ReadProjectsApiProjectsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectListResponse>>;

    /**
     * Retrieve a list of projects with pagination.
     * Read Projects
     */
    readProjectsApiProjectsGet(page?: number, pageSize?: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectListResponse>;

    /**
     * Update a project by ID.
     * @summary Update
     * @param {string} projectId 
     * @param {ProjectUpdate} projectUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    updateApiProjectsProjectIdPutRaw(requestParameters: UpdateApiProjectsProjectIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectResponse>>;

    /**
     * Update a project by ID.
     * Update
     */
    updateApiProjectsProjectIdPut(projectId: string, projectUpdate: ProjectUpdate, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectResponse>;

}

/**
 * 
 */
export class ProjectsApi extends runtime.BaseAPI implements ProjectsApiInterface {

    /**
     * Create a new project.
     * Create
     */
    async createApiProjectsPostRaw(requestParameters: CreateApiProjectsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectResponse>> {
        if (requestParameters['projectCreate'] == null) {
            throw new runtime.RequiredError(
                'projectCreate',
                'Required parameter "projectCreate" was null or undefined when calling createApiProjectsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/projects/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProjectCreateToJSON(requestParameters['projectCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectResponseFromJSON(jsonValue));
    }

    /**
     * Create a new project.
     * Create
     */
    async createApiProjectsPost(projectCreate: ProjectCreate, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectResponse> {
        const response = await this.createApiProjectsPostRaw({ projectCreate: projectCreate }, initOverrides);
        return await response.value();
    }

    /**
     * Delete a project by ID.
     * Delete
     */
    async deleteApiProjectsProjectIdDeleteRaw(requestParameters: DeleteApiProjectsProjectIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling deleteApiProjectsProjectIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/projects/{project_id}`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Delete a project by ID.
     * Delete
     */
    async deleteApiProjectsProjectIdDelete(projectId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.deleteApiProjectsProjectIdDeleteRaw({ projectId: projectId }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a project by ID.
     * Read Project
     */
    async readProjectApiProjectsProjectIdGetRaw(requestParameters: ReadProjectApiProjectsProjectIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectResponse>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling readProjectApiProjectsProjectIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/projects/{project_id}`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve a project by ID.
     * Read Project
     */
    async readProjectApiProjectsProjectIdGet(projectId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectResponse> {
        const response = await this.readProjectApiProjectsProjectIdGetRaw({ projectId: projectId }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of projects with pagination.
     * Read Projects
     */
    async readProjectsApiProjectsGetRaw(requestParameters: ReadProjectsApiProjectsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectListResponse>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/projects/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectListResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve a list of projects with pagination.
     * Read Projects
     */
    async readProjectsApiProjectsGet(page?: number, pageSize?: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectListResponse> {
        const response = await this.readProjectsApiProjectsGetRaw({ page: page, pageSize: pageSize }, initOverrides);
        return await response.value();
    }

    /**
     * Update a project by ID.
     * Update
     */
    async updateApiProjectsProjectIdPutRaw(requestParameters: UpdateApiProjectsProjectIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectResponse>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling updateApiProjectsProjectIdPut().'
            );
        }

        if (requestParameters['projectUpdate'] == null) {
            throw new runtime.RequiredError(
                'projectUpdate',
                'Required parameter "projectUpdate" was null or undefined when calling updateApiProjectsProjectIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/projects/{project_id}`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProjectUpdateToJSON(requestParameters['projectUpdate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectResponseFromJSON(jsonValue));
    }

    /**
     * Update a project by ID.
     * Update
     */
    async updateApiProjectsProjectIdPut(projectId: string, projectUpdate: ProjectUpdate, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectResponse> {
        const response = await this.updateApiProjectsProjectIdPutRaw({ projectId: projectId, projectUpdate: projectUpdate }, initOverrides);
        return await response.value();
    }

}
