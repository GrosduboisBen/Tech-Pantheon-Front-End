// tslint:disable
/**
 * Project Manager ( Portfolio )
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
    HTTPValidationError,
    MissionCreate,
    MissionListResponse,
    MissionResponse,
    MissionUpdate,
} from '../models';

export interface CreateApiMissionsPostRequest {
    missionCreate: MissionCreate;
}

export interface DeleteApiMissionsMissionIdDeleteRequest {
    missionId: string;
}

export interface ReadMissionApiMissionsMissionIdGetRequest {
    missionId: string;
}

export interface ReadMissionsApiMissionsGetRequest {
    page?: number;
    pageSize?: number;
}

export interface UpdateApiMissionsMissionIdPutRequest {
    missionId: string;
    missionUpdate: MissionUpdate;
}

/**
 * no description
 */
export class MissionsApi extends BaseAPI {

    /**
     * Create a new mission.
     * Create
     */
    createApiMissionsPost({ missionCreate }: CreateApiMissionsPostRequest): Observable<MissionResponse>
    createApiMissionsPost({ missionCreate }: CreateApiMissionsPostRequest, opts?: OperationOpts): Observable<AjaxResponse<MissionResponse>>
    createApiMissionsPost({ missionCreate }: CreateApiMissionsPostRequest, opts?: OperationOpts): Observable<MissionResponse | AjaxResponse<MissionResponse>> {
        throwIfNullOrUndefined(missionCreate, 'missionCreate', 'createApiMissionsPost');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<MissionResponse>({
            url: '/api/missions/',
            method: 'POST',
            headers,
            body: missionCreate,
        }, opts?.responseOpts);
    };

    /**
     * Delete a mission by ID.
     * Delete
     */
    deleteApiMissionsMissionIdDelete({ missionId }: DeleteApiMissionsMissionIdDeleteRequest): Observable<any>
    deleteApiMissionsMissionIdDelete({ missionId }: DeleteApiMissionsMissionIdDeleteRequest, opts?: OperationOpts): Observable<AjaxResponse<any>>
    deleteApiMissionsMissionIdDelete({ missionId }: DeleteApiMissionsMissionIdDeleteRequest, opts?: OperationOpts): Observable<any | AjaxResponse<any>> {
        throwIfNullOrUndefined(missionId, 'missionId', 'deleteApiMissionsMissionIdDelete');

        return this.request<any>({
            url: '/api/missions/{mission_id}'.replace('{mission_id}', encodeURI(missionId)),
            method: 'DELETE',
        }, opts?.responseOpts);
    };

    /**
     * Retrieve a mission by ID.
     * Read Mission
     */
    readMissionApiMissionsMissionIdGet({ missionId }: ReadMissionApiMissionsMissionIdGetRequest): Observable<MissionResponse>
    readMissionApiMissionsMissionIdGet({ missionId }: ReadMissionApiMissionsMissionIdGetRequest, opts?: OperationOpts): Observable<AjaxResponse<MissionResponse>>
    readMissionApiMissionsMissionIdGet({ missionId }: ReadMissionApiMissionsMissionIdGetRequest, opts?: OperationOpts): Observable<MissionResponse | AjaxResponse<MissionResponse>> {
        throwIfNullOrUndefined(missionId, 'missionId', 'readMissionApiMissionsMissionIdGet');

        return this.request<MissionResponse>({
            url: '/api/missions/{mission_id}'.replace('{mission_id}', encodeURI(missionId)),
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     * Retrieve a list of missions with pagination.
     * Read Missions
     */
    readMissionsApiMissionsGet({ page, pageSize }: ReadMissionsApiMissionsGetRequest): Observable<MissionListResponse>
    readMissionsApiMissionsGet({ page, pageSize }: ReadMissionsApiMissionsGetRequest, opts?: OperationOpts): Observable<AjaxResponse<MissionListResponse>>
    readMissionsApiMissionsGet({ page, pageSize }: ReadMissionsApiMissionsGetRequest, opts?: OperationOpts): Observable<MissionListResponse | AjaxResponse<MissionListResponse>> {

        const query: HttpQuery = {};

        if (page != null) { query['page'] = page; }
        if (pageSize != null) { query['page_size'] = pageSize; }

        return this.request<MissionListResponse>({
            url: '/api/missions/',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Update a mission by ID.
     * Update
     */
    updateApiMissionsMissionIdPut({ missionId, missionUpdate }: UpdateApiMissionsMissionIdPutRequest): Observable<MissionResponse>
    updateApiMissionsMissionIdPut({ missionId, missionUpdate }: UpdateApiMissionsMissionIdPutRequest, opts?: OperationOpts): Observable<AjaxResponse<MissionResponse>>
    updateApiMissionsMissionIdPut({ missionId, missionUpdate }: UpdateApiMissionsMissionIdPutRequest, opts?: OperationOpts): Observable<MissionResponse | AjaxResponse<MissionResponse>> {
        throwIfNullOrUndefined(missionId, 'missionId', 'updateApiMissionsMissionIdPut');
        throwIfNullOrUndefined(missionUpdate, 'missionUpdate', 'updateApiMissionsMissionIdPut');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<MissionResponse>({
            url: '/api/missions/{mission_id}'.replace('{mission_id}', encodeURI(missionId)),
            method: 'PUT',
            headers,
            body: missionUpdate,
        }, opts?.responseOpts);
    };

}
