/* tslint:disable */
/* eslint-disable */
/**
 * Project Manager ( Portfolio )
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  TagCreate,
  TagListResponse,
  TagResponse,
  TagUpdate,
} from '../models/index';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    TagCreateFromJSON,
    TagCreateToJSON,
    TagListResponseFromJSON,
    TagListResponseToJSON,
    TagResponseFromJSON,
    TagResponseToJSON,
    TagUpdateFromJSON,
    TagUpdateToJSON,
} from '../models/index';

export interface CreateApiTagsPostRequest {
    tagCreate: TagCreate;
}

export interface DeleteApiTagsTagIdDeleteRequest {
    tagId: string;
}

export interface ReadTagApiTagsTagIdGetRequest {
    tagId: string;
}

export interface ReadTagsApiTagsGetRequest {
    page?: number;
    pageSize?: number;
}

export interface UpdateApiTagsTagIdPutRequest {
    tagId: string;
    tagUpdate: TagUpdate;
}

/**
 * TagsApi - interface
 * 
 * @export
 * @interface TagsApiInterface
 */
export interface TagsApiInterface {
    /**
     * Create a new tag.
     * @summary Create
     * @param {TagCreate} tagCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApiInterface
     */
    createApiTagsPostRaw(requestParameters: CreateApiTagsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TagResponse>>;

    /**
     * Create a new tag.
     * Create
     */
    createApiTagsPost(tagCreate: TagCreate, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TagResponse>;

    /**
     * Delete a tag by ID.
     * @summary Delete
     * @param {string} tagId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApiInterface
     */
    deleteApiTagsTagIdDeleteRaw(requestParameters: DeleteApiTagsTagIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * Delete a tag by ID.
     * Delete
     */
    deleteApiTagsTagIdDelete(tagId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * Retrieve a tag by ID.
     * @summary Read Tag
     * @param {string} tagId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApiInterface
     */
    readTagApiTagsTagIdGetRaw(requestParameters: ReadTagApiTagsTagIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TagResponse>>;

    /**
     * Retrieve a tag by ID.
     * Read Tag
     */
    readTagApiTagsTagIdGet(tagId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TagResponse>;

    /**
     * Retrieve a list of tags with pagination.
     * @summary Read Tags
     * @param {number} [page] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApiInterface
     */
    readTagsApiTagsGetRaw(requestParameters: ReadTagsApiTagsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TagListResponse>>;

    /**
     * Retrieve a list of tags with pagination.
     * Read Tags
     */
    readTagsApiTagsGet(page?: number, pageSize?: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TagListResponse>;

    /**
     * Update a tag by ID.
     * @summary Update
     * @param {string} tagId 
     * @param {TagUpdate} tagUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApiInterface
     */
    updateApiTagsTagIdPutRaw(requestParameters: UpdateApiTagsTagIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TagResponse>>;

    /**
     * Update a tag by ID.
     * Update
     */
    updateApiTagsTagIdPut(tagId: string, tagUpdate: TagUpdate, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TagResponse>;

}

/**
 * 
 */
export class TagsApi extends runtime.BaseAPI implements TagsApiInterface {

    /**
     * Create a new tag.
     * Create
     */
    async createApiTagsPostRaw(requestParameters: CreateApiTagsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TagResponse>> {
        if (requestParameters['tagCreate'] == null) {
            throw new runtime.RequiredError(
                'tagCreate',
                'Required parameter "tagCreate" was null or undefined when calling createApiTagsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/tags/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TagCreateToJSON(requestParameters['tagCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TagResponseFromJSON(jsonValue));
    }

    /**
     * Create a new tag.
     * Create
     */
    async createApiTagsPost(tagCreate: TagCreate, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TagResponse> {
        const response = await this.createApiTagsPostRaw({ tagCreate: tagCreate }, initOverrides);
        return await response.value();
    }

    /**
     * Delete a tag by ID.
     * Delete
     */
    async deleteApiTagsTagIdDeleteRaw(requestParameters: DeleteApiTagsTagIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['tagId'] == null) {
            throw new runtime.RequiredError(
                'tagId',
                'Required parameter "tagId" was null or undefined when calling deleteApiTagsTagIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/tags/{tag_id}`.replace(`{${"tag_id"}}`, encodeURIComponent(String(requestParameters['tagId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Delete a tag by ID.
     * Delete
     */
    async deleteApiTagsTagIdDelete(tagId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.deleteApiTagsTagIdDeleteRaw({ tagId: tagId }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a tag by ID.
     * Read Tag
     */
    async readTagApiTagsTagIdGetRaw(requestParameters: ReadTagApiTagsTagIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TagResponse>> {
        if (requestParameters['tagId'] == null) {
            throw new runtime.RequiredError(
                'tagId',
                'Required parameter "tagId" was null or undefined when calling readTagApiTagsTagIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/tags/{tag_id}`.replace(`{${"tag_id"}}`, encodeURIComponent(String(requestParameters['tagId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TagResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve a tag by ID.
     * Read Tag
     */
    async readTagApiTagsTagIdGet(tagId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TagResponse> {
        const response = await this.readTagApiTagsTagIdGetRaw({ tagId: tagId }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of tags with pagination.
     * Read Tags
     */
    async readTagsApiTagsGetRaw(requestParameters: ReadTagsApiTagsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TagListResponse>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/tags/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TagListResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve a list of tags with pagination.
     * Read Tags
     */
    async readTagsApiTagsGet(page?: number, pageSize?: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TagListResponse> {
        const response = await this.readTagsApiTagsGetRaw({ page: page, pageSize: pageSize }, initOverrides);
        return await response.value();
    }

    /**
     * Update a tag by ID.
     * Update
     */
    async updateApiTagsTagIdPutRaw(requestParameters: UpdateApiTagsTagIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TagResponse>> {
        if (requestParameters['tagId'] == null) {
            throw new runtime.RequiredError(
                'tagId',
                'Required parameter "tagId" was null or undefined when calling updateApiTagsTagIdPut().'
            );
        }

        if (requestParameters['tagUpdate'] == null) {
            throw new runtime.RequiredError(
                'tagUpdate',
                'Required parameter "tagUpdate" was null or undefined when calling updateApiTagsTagIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/tags/{tag_id}`.replace(`{${"tag_id"}}`, encodeURIComponent(String(requestParameters['tagId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TagUpdateToJSON(requestParameters['tagUpdate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TagResponseFromJSON(jsonValue));
    }

    /**
     * Update a tag by ID.
     * Update
     */
    async updateApiTagsTagIdPut(tagId: string, tagUpdate: TagUpdate, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TagResponse> {
        const response = await this.updateApiTagsTagIdPutRaw({ tagId: tagId, tagUpdate: tagUpdate }, initOverrides);
        return await response.value();
    }

}
