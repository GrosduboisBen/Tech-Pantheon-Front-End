// tslint:disable
/**
 * Project Manager ( Portfolio )
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
    HTTPValidationError,
    TagCreate,
    TagListResponse,
    TagResponse,
    TagUpdate,
} from '../models';

export interface CreateApiTagsPostRequest {
    tagCreate: TagCreate;
}

export interface DeleteApiTagsTagIdDeleteRequest {
    tagId: string;
}

export interface ReadTagApiTagsTagIdGetRequest {
    tagId: string;
}

export interface ReadTagsApiTagsGetRequest {
    page?: number;
    pageSize?: number;
}

export interface UpdateApiTagsTagIdPutRequest {
    tagId: string;
    tagUpdate: TagUpdate;
}

/**
 * no description
 */
export class TagsApi extends BaseAPI {

    /**
     * Create a new tag.
     * Create
     */
    createApiTagsPost({ tagCreate }: CreateApiTagsPostRequest): Observable<TagResponse>
    createApiTagsPost({ tagCreate }: CreateApiTagsPostRequest, opts?: OperationOpts): Observable<AjaxResponse<TagResponse>>
    createApiTagsPost({ tagCreate }: CreateApiTagsPostRequest, opts?: OperationOpts): Observable<TagResponse | AjaxResponse<TagResponse>> {
        throwIfNullOrUndefined(tagCreate, 'tagCreate', 'createApiTagsPost');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<TagResponse>({
            url: '/api/tags/',
            method: 'POST',
            headers,
            body: tagCreate,
        }, opts?.responseOpts);
    };

    /**
     * Delete a tag by ID.
     * Delete
     */
    deleteApiTagsTagIdDelete({ tagId }: DeleteApiTagsTagIdDeleteRequest): Observable<any>
    deleteApiTagsTagIdDelete({ tagId }: DeleteApiTagsTagIdDeleteRequest, opts?: OperationOpts): Observable<AjaxResponse<any>>
    deleteApiTagsTagIdDelete({ tagId }: DeleteApiTagsTagIdDeleteRequest, opts?: OperationOpts): Observable<any | AjaxResponse<any>> {
        throwIfNullOrUndefined(tagId, 'tagId', 'deleteApiTagsTagIdDelete');

        return this.request<any>({
            url: '/api/tags/{tag_id}'.replace('{tag_id}', encodeURI(tagId)),
            method: 'DELETE',
        }, opts?.responseOpts);
    };

    /**
     * Retrieve a tag by ID.
     * Read Tag
     */
    readTagApiTagsTagIdGet({ tagId }: ReadTagApiTagsTagIdGetRequest): Observable<TagResponse>
    readTagApiTagsTagIdGet({ tagId }: ReadTagApiTagsTagIdGetRequest, opts?: OperationOpts): Observable<AjaxResponse<TagResponse>>
    readTagApiTagsTagIdGet({ tagId }: ReadTagApiTagsTagIdGetRequest, opts?: OperationOpts): Observable<TagResponse | AjaxResponse<TagResponse>> {
        throwIfNullOrUndefined(tagId, 'tagId', 'readTagApiTagsTagIdGet');

        return this.request<TagResponse>({
            url: '/api/tags/{tag_id}'.replace('{tag_id}', encodeURI(tagId)),
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     * Retrieve a list of tags with pagination.
     * Read Tags
     */
    readTagsApiTagsGet({ page, pageSize }: ReadTagsApiTagsGetRequest): Observable<TagListResponse>
    readTagsApiTagsGet({ page, pageSize }: ReadTagsApiTagsGetRequest, opts?: OperationOpts): Observable<AjaxResponse<TagListResponse>>
    readTagsApiTagsGet({ page, pageSize }: ReadTagsApiTagsGetRequest, opts?: OperationOpts): Observable<TagListResponse | AjaxResponse<TagListResponse>> {

        const query: HttpQuery = {};

        if (page != null) { query['page'] = page; }
        if (pageSize != null) { query['page_size'] = pageSize; }

        return this.request<TagListResponse>({
            url: '/api/tags/',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Update a tag by ID.
     * Update
     */
    updateApiTagsTagIdPut({ tagId, tagUpdate }: UpdateApiTagsTagIdPutRequest): Observable<TagResponse>
    updateApiTagsTagIdPut({ tagId, tagUpdate }: UpdateApiTagsTagIdPutRequest, opts?: OperationOpts): Observable<AjaxResponse<TagResponse>>
    updateApiTagsTagIdPut({ tagId, tagUpdate }: UpdateApiTagsTagIdPutRequest, opts?: OperationOpts): Observable<TagResponse | AjaxResponse<TagResponse>> {
        throwIfNullOrUndefined(tagId, 'tagId', 'updateApiTagsTagIdPut');
        throwIfNullOrUndefined(tagUpdate, 'tagUpdate', 'updateApiTagsTagIdPut');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<TagResponse>({
            url: '/api/tags/{tag_id}'.replace('{tag_id}', encodeURI(tagId)),
            method: 'PUT',
            headers,
            body: tagUpdate,
        }, opts?.responseOpts);
    };

}
