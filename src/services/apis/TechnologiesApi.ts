// tslint:disable
/**
 * Project Manager ( Portfolio )
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
    HTTPValidationError,
    TechnologyCreate,
    TechnologyListResponse,
    TechnologyResponse,
    TechnologyUpdate,
} from '../models';

export interface CreateApiTechnologiesPostRequest {
    technologyCreate: TechnologyCreate;
}

export interface DeleteApiTechnologiesTechnologyIdDeleteRequest {
    technologyId: string;
}

export interface ReadTechnologiesApiTechnologiesGetRequest {
    page?: number;
    pageSize?: number;
}

export interface ReadTechnologyApiTechnologiesTechnologyIdGetRequest {
    technologyId: string;
}

export interface UpdateApiTechnologiesTechnologyIdPutRequest {
    technologyId: string;
    technologyUpdate: TechnologyUpdate;
}

/**
 * no description
 */
export class TechnologiesApi extends BaseAPI {

    /**
     * Create a new technology.
     * Create
     */
    createApiTechnologiesPost({ technologyCreate }: CreateApiTechnologiesPostRequest): Observable<TechnologyResponse>
    createApiTechnologiesPost({ technologyCreate }: CreateApiTechnologiesPostRequest, opts?: OperationOpts): Observable<AjaxResponse<TechnologyResponse>>
    createApiTechnologiesPost({ technologyCreate }: CreateApiTechnologiesPostRequest, opts?: OperationOpts): Observable<TechnologyResponse | AjaxResponse<TechnologyResponse>> {
        throwIfNullOrUndefined(technologyCreate, 'technologyCreate', 'createApiTechnologiesPost');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<TechnologyResponse>({
            url: '/api/technologies/',
            method: 'POST',
            headers,
            body: technologyCreate,
        }, opts?.responseOpts);
    };

    /**
     * Delete a technology by ID.
     * Delete
     */
    deleteApiTechnologiesTechnologyIdDelete({ technologyId }: DeleteApiTechnologiesTechnologyIdDeleteRequest): Observable<any>
    deleteApiTechnologiesTechnologyIdDelete({ technologyId }: DeleteApiTechnologiesTechnologyIdDeleteRequest, opts?: OperationOpts): Observable<AjaxResponse<any>>
    deleteApiTechnologiesTechnologyIdDelete({ technologyId }: DeleteApiTechnologiesTechnologyIdDeleteRequest, opts?: OperationOpts): Observable<any | AjaxResponse<any>> {
        throwIfNullOrUndefined(technologyId, 'technologyId', 'deleteApiTechnologiesTechnologyIdDelete');

        return this.request<any>({
            url: '/api/technologies/{technology_id}'.replace('{technology_id}', encodeURI(technologyId)),
            method: 'DELETE',
        }, opts?.responseOpts);
    };

    /**
     * Retrieve a list of technologies with pagination.
     * Read Technologies
     */
    readTechnologiesApiTechnologiesGet({ page, pageSize }: ReadTechnologiesApiTechnologiesGetRequest): Observable<TechnologyListResponse>
    readTechnologiesApiTechnologiesGet({ page, pageSize }: ReadTechnologiesApiTechnologiesGetRequest, opts?: OperationOpts): Observable<AjaxResponse<TechnologyListResponse>>
    readTechnologiesApiTechnologiesGet({ page, pageSize }: ReadTechnologiesApiTechnologiesGetRequest, opts?: OperationOpts): Observable<TechnologyListResponse | AjaxResponse<TechnologyListResponse>> {

        const query: HttpQuery = {};

        if (page != null) { query['page'] = page; }
        if (pageSize != null) { query['page_size'] = pageSize; }

        return this.request<TechnologyListResponse>({
            url: '/api/technologies/',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve a technology by ID.
     * Read Technology
     */
    readTechnologyApiTechnologiesTechnologyIdGet({ technologyId }: ReadTechnologyApiTechnologiesTechnologyIdGetRequest): Observable<TechnologyResponse>
    readTechnologyApiTechnologiesTechnologyIdGet({ technologyId }: ReadTechnologyApiTechnologiesTechnologyIdGetRequest, opts?: OperationOpts): Observable<AjaxResponse<TechnologyResponse>>
    readTechnologyApiTechnologiesTechnologyIdGet({ technologyId }: ReadTechnologyApiTechnologiesTechnologyIdGetRequest, opts?: OperationOpts): Observable<TechnologyResponse | AjaxResponse<TechnologyResponse>> {
        throwIfNullOrUndefined(technologyId, 'technologyId', 'readTechnologyApiTechnologiesTechnologyIdGet');

        return this.request<TechnologyResponse>({
            url: '/api/technologies/{technology_id}'.replace('{technology_id}', encodeURI(technologyId)),
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     * Update a technology by ID.
     * Update
     */
    updateApiTechnologiesTechnologyIdPut({ technologyId, technologyUpdate }: UpdateApiTechnologiesTechnologyIdPutRequest): Observable<TechnologyResponse>
    updateApiTechnologiesTechnologyIdPut({ technologyId, technologyUpdate }: UpdateApiTechnologiesTechnologyIdPutRequest, opts?: OperationOpts): Observable<AjaxResponse<TechnologyResponse>>
    updateApiTechnologiesTechnologyIdPut({ technologyId, technologyUpdate }: UpdateApiTechnologiesTechnologyIdPutRequest, opts?: OperationOpts): Observable<TechnologyResponse | AjaxResponse<TechnologyResponse>> {
        throwIfNullOrUndefined(technologyId, 'technologyId', 'updateApiTechnologiesTechnologyIdPut');
        throwIfNullOrUndefined(technologyUpdate, 'technologyUpdate', 'updateApiTechnologiesTechnologyIdPut');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<TechnologyResponse>({
            url: '/api/technologies/{technology_id}'.replace('{technology_id}', encodeURI(technologyId)),
            method: 'PUT',
            headers,
            body: technologyUpdate,
        }, opts?.responseOpts);
    };

}
