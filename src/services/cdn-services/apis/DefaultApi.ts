// tslint:disable
/**
 * Secure CDN API
 * API pour la gestion d\'un CDN sécurisé avec authentification JWT
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders } from '../runtime';
import type {
    CreateSubfolderIdSubfolderNamePostRequest,
    LoginPost200Response,
    RegisterPostRequest,
} from '../models';

export interface AddIdFileNamePostRequest {
    id: string;
    fileName: string;
    file?: Blob;
}

export interface CreateSubfolderIdSubfolderNamePostRequest {
    id: string;
    subfolderName: string;
    createSubfolderIdSubfolderNamePostRequest: CreateSubfolderIdSubfolderNamePostRequest;
}

export interface DeleteFileIdFileNameDeleteRequest {
    id: string;
    fileName: string;
}

export interface DeleteFolderIdFolderNameDeleteRequest {
    id: string;
    folderName: string;
}

export interface DownloadIdFileNameGetRequest {
    id: string;
    fileName: string;
}

export interface ListIdFolderNameGetRequest {
    id: string;
    folderName: string;
}

export interface LoginPostRequest {
    registerPostRequest: RegisterPostRequest;
}

export interface RegisterPostRequest {
    registerPostRequest: RegisterPostRequest;
}

export interface UploadIdPostRequest {
    id: string;
    file?: Blob;
}

/**
 * no description
 */
export class DefaultApi extends BaseAPI {

    /**
     * Upload and compress a file into a user\'s folder
     */
    addIdFileNamePost({ id, fileName, file }: AddIdFileNamePostRequest): Observable<void>
    addIdFileNamePost({ id, fileName, file }: AddIdFileNamePostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    addIdFileNamePost({ id, fileName, file }: AddIdFileNamePostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(id, 'id', 'addIdFileNamePost');
        throwIfNullOrUndefined(fileName, 'fileName', 'addIdFileNamePost');

        const headers: HttpHeaders = {
        };

        const formData = new FormData();
        if (file !== undefined) { formData.append('file', file as any); }

        return this.request<void>({
            url: '/add/{id}/{fileName}'.replace('{id}', encodeURI(id)).replace('{fileName}', encodeURI(fileName)),
            method: 'POST',
            headers,
            body: formData,
        }, opts?.responseOpts);
    };

    /**
     * Create a subfolder inside a user\'s folder
     */
    createSubfolderIdSubfolderNamePost({ id, subfolderName, createSubfolderIdSubfolderNamePostRequest }: CreateSubfolderIdSubfolderNamePostRequest): Observable<void>
    createSubfolderIdSubfolderNamePost({ id, subfolderName, createSubfolderIdSubfolderNamePostRequest }: CreateSubfolderIdSubfolderNamePostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    createSubfolderIdSubfolderNamePost({ id, subfolderName, createSubfolderIdSubfolderNamePostRequest }: CreateSubfolderIdSubfolderNamePostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(id, 'id', 'createSubfolderIdSubfolderNamePost');
        throwIfNullOrUndefined(subfolderName, 'subfolderName', 'createSubfolderIdSubfolderNamePost');
        throwIfNullOrUndefined(createSubfolderIdSubfolderNamePostRequest, 'createSubfolderIdSubfolderNamePostRequest', 'createSubfolderIdSubfolderNamePost');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<void>({
            url: '/create-subfolder/{id}/{subfolderName}'.replace('{id}', encodeURI(id)).replace('{subfolderName}', encodeURI(subfolderName)),
            method: 'POST',
            headers,
            body: createSubfolderIdSubfolderNamePostRequest,
        }, opts?.responseOpts);
    };

    /**
     * Delete a file from a user\'s folder
     */
    deleteFileIdFileNameDelete({ id, fileName }: DeleteFileIdFileNameDeleteRequest): Observable<void>
    deleteFileIdFileNameDelete({ id, fileName }: DeleteFileIdFileNameDeleteRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    deleteFileIdFileNameDelete({ id, fileName }: DeleteFileIdFileNameDeleteRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(id, 'id', 'deleteFileIdFileNameDelete');
        throwIfNullOrUndefined(fileName, 'fileName', 'deleteFileIdFileNameDelete');

        const headers: HttpHeaders = {
        };

        return this.request<void>({
            url: '/delete-file/{id}/{fileName}'.replace('{id}', encodeURI(id)).replace('{fileName}', encodeURI(fileName)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Delete a folder (user or admin)
     */
    deleteFolderIdFolderNameDelete({ id, folderName }: DeleteFolderIdFolderNameDeleteRequest): Observable<void>
    deleteFolderIdFolderNameDelete({ id, folderName }: DeleteFolderIdFolderNameDeleteRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    deleteFolderIdFolderNameDelete({ id, folderName }: DeleteFolderIdFolderNameDeleteRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(id, 'id', 'deleteFolderIdFolderNameDelete');
        throwIfNullOrUndefined(folderName, 'folderName', 'deleteFolderIdFolderNameDelete');

        const headers: HttpHeaders = {
        };

        return this.request<void>({
            url: '/delete-folder/{id}/{folderName}'.replace('{id}', encodeURI(id)).replace('{folderName}', encodeURI(folderName)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Download and decompress a file from a user\'s folder
     */
    downloadIdFileNameGet({ id, fileName }: DownloadIdFileNameGetRequest): Observable<void>
    downloadIdFileNameGet({ id, fileName }: DownloadIdFileNameGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    downloadIdFileNameGet({ id, fileName }: DownloadIdFileNameGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(id, 'id', 'downloadIdFileNameGet');
        throwIfNullOrUndefined(fileName, 'fileName', 'downloadIdFileNameGet');

        const headers: HttpHeaders = {
        };

        return this.request<void>({
            url: '/download/{id}/{fileName}'.replace('{id}', encodeURI(id)).replace('{fileName}', encodeURI(fileName)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * List files in a user\'s folder
     */
    listIdFolderNameGet({ id, folderName }: ListIdFolderNameGetRequest): Observable<void>
    listIdFolderNameGet({ id, folderName }: ListIdFolderNameGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    listIdFolderNameGet({ id, folderName }: ListIdFolderNameGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(id, 'id', 'listIdFolderNameGet');
        throwIfNullOrUndefined(folderName, 'folderName', 'listIdFolderNameGet');

        const headers: HttpHeaders = {
        };

        return this.request<void>({
            url: '/list/{id}/{folderName}'.replace('{id}', encodeURI(id)).replace('{folderName}', encodeURI(folderName)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Login to obtain a JWT token
     */
    loginPost({ registerPostRequest }: LoginPostRequest): Observable<LoginPost200Response>
    loginPost({ registerPostRequest }: LoginPostRequest, opts?: OperationOpts): Observable<AjaxResponse<LoginPost200Response>>
    loginPost({ registerPostRequest }: LoginPostRequest, opts?: OperationOpts): Observable<LoginPost200Response | AjaxResponse<LoginPost200Response>> {
        throwIfNullOrUndefined(registerPostRequest, 'registerPostRequest', 'loginPost');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<LoginPost200Response>({
            url: '/login',
            method: 'POST',
            headers,
            body: registerPostRequest,
        }, opts?.responseOpts);
    };

    /**
     * Register a new user
     */
    registerPost({ registerPostRequest }: RegisterPostRequest): Observable<void>
    registerPost({ registerPostRequest }: RegisterPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    registerPost({ registerPostRequest }: RegisterPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(registerPostRequest, 'registerPostRequest', 'registerPost');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<void>({
            url: '/register',
            method: 'POST',
            headers,
            body: registerPostRequest,
        }, opts?.responseOpts);
    };

    /**
     * Upload a file into a user\'s folder
     */
    uploadIdPost({ id, file }: UploadIdPostRequest): Observable<void>
    uploadIdPost({ id, file }: UploadIdPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    uploadIdPost({ id, file }: UploadIdPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(id, 'id', 'uploadIdPost');

        const headers: HttpHeaders = {
        };

        const formData = new FormData();
        if (file !== undefined) { formData.append('file', file as any); }

        return this.request<void>({
            url: '/upload/{id}'.replace('{id}', encodeURI(id)),
            method: 'POST',
            headers,
            body: formData,
        }, opts?.responseOpts);
    };

}
