// tslint:disable
/**
 * Secure CDN API
 * API for managing a secure CDN with JWT authentication
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders } from '../runtime';
import type {
    CreateSubfolderRequest,
    ListIdWildcardPathGet200Response,
    LoginRequest,
    LoginResponse,
    RegisterRequest,
} from '../models';

export interface AddIdWildcardPathPostRequest {
    id: string;
    wildcardPath: string;
    file?: Blob;
}

export interface CreateSubfolderIdWildcardPathPostRequest {
    id: string;
    wildcardPath: string;
    createSubfolderRequest: CreateSubfolderRequest;
}

export interface DeleteFileIdWildcardPathDeleteRequest {
    id: string;
    wildcardPath: string;
}

export interface DeleteFolderIdWildcardPathDeleteRequest {
    id: string;
    wildcardPath: string;
}

export interface DownloadIdWildcardPathGetRequest {
    id: string;
    wildcardPath: string;
}

export interface ListIdWildcardPathGetRequest {
    id: string;
    wildcardPath: string;
}

export interface LoginPostRequest {
    loginRequest: LoginRequest;
}

export interface RegisterPostRequest {
    registerRequest: RegisterRequest;
}

export interface UploadIdPostRequest {
    id: string;
    file?: Blob;
}

/**
 * no description
 */
export class DefaultApi extends BaseAPI {

    /**
     * Upload and compress a file into a user\'s folder
     */
    addIdWildcardPathPost({ id, wildcardPath, file }: AddIdWildcardPathPostRequest): Observable<void>
    addIdWildcardPathPost({ id, wildcardPath, file }: AddIdWildcardPathPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    addIdWildcardPathPost({ id, wildcardPath, file }: AddIdWildcardPathPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(id, 'id', 'addIdWildcardPathPost');
        throwIfNullOrUndefined(wildcardPath, 'wildcardPath', 'addIdWildcardPathPost');

        const headers: HttpHeaders = {
        };

        const formData = new FormData();
        if (file !== undefined) { formData.append('file', file as any); }

        return this.request<void>({
            url: '/add/{id}/{wildcardPath}'.replace('{id}', encodeURI(id)).replace('{wildcardPath}', encodeURI(wildcardPath)),
            method: 'POST',
            headers,
            body: formData,
        }, opts?.responseOpts);
    };

    /**
     * Create a subfolder inside a user\'s folder
     */
    createSubfolderIdWildcardPathPost({ id, wildcardPath, createSubfolderRequest }: CreateSubfolderIdWildcardPathPostRequest): Observable<void>
    createSubfolderIdWildcardPathPost({ id, wildcardPath, createSubfolderRequest }: CreateSubfolderIdWildcardPathPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    createSubfolderIdWildcardPathPost({ id, wildcardPath, createSubfolderRequest }: CreateSubfolderIdWildcardPathPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(id, 'id', 'createSubfolderIdWildcardPathPost');
        throwIfNullOrUndefined(wildcardPath, 'wildcardPath', 'createSubfolderIdWildcardPathPost');
        throwIfNullOrUndefined(createSubfolderRequest, 'createSubfolderRequest', 'createSubfolderIdWildcardPathPost');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<void>({
            url: '/create-subfolder/{id}/{wildcardPath}'.replace('{id}', encodeURI(id)).replace('{wildcardPath}', encodeURI(wildcardPath)),
            method: 'POST',
            headers,
            body: createSubfolderRequest,
        }, opts?.responseOpts);
    };

    /**
     * Delete a file from a user\'s folder
     */
    deleteFileIdWildcardPathDelete({ id, wildcardPath }: DeleteFileIdWildcardPathDeleteRequest): Observable<void>
    deleteFileIdWildcardPathDelete({ id, wildcardPath }: DeleteFileIdWildcardPathDeleteRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    deleteFileIdWildcardPathDelete({ id, wildcardPath }: DeleteFileIdWildcardPathDeleteRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(id, 'id', 'deleteFileIdWildcardPathDelete');
        throwIfNullOrUndefined(wildcardPath, 'wildcardPath', 'deleteFileIdWildcardPathDelete');

        const headers: HttpHeaders = {
        };

        return this.request<void>({
            url: '/delete-file/{id}/{wildcardPath}'.replace('{id}', encodeURI(id)).replace('{wildcardPath}', encodeURI(wildcardPath)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Delete a folder (user or admin)
     */
    deleteFolderIdWildcardPathDelete({ id, wildcardPath }: DeleteFolderIdWildcardPathDeleteRequest): Observable<void>
    deleteFolderIdWildcardPathDelete({ id, wildcardPath }: DeleteFolderIdWildcardPathDeleteRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    deleteFolderIdWildcardPathDelete({ id, wildcardPath }: DeleteFolderIdWildcardPathDeleteRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(id, 'id', 'deleteFolderIdWildcardPathDelete');
        throwIfNullOrUndefined(wildcardPath, 'wildcardPath', 'deleteFolderIdWildcardPathDelete');

        const headers: HttpHeaders = {
        };

        return this.request<void>({
            url: '/delete-folder/{id}/{wildcardPath}'.replace('{id}', encodeURI(id)).replace('{wildcardPath}', encodeURI(wildcardPath)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Download and decompress a file from a user\'s folder
     */
    downloadIdWildcardPathGet({ id, wildcardPath }: DownloadIdWildcardPathGetRequest): Observable<Blob>
    downloadIdWildcardPathGet({ id, wildcardPath }: DownloadIdWildcardPathGetRequest, opts?: OperationOpts): Observable<AjaxResponse<Blob>>
    downloadIdWildcardPathGet({ id, wildcardPath }: DownloadIdWildcardPathGetRequest, opts?: OperationOpts): Observable<Blob | AjaxResponse<Blob>> {
        throwIfNullOrUndefined(id, 'id', 'downloadIdWildcardPathGet');
        throwIfNullOrUndefined(wildcardPath, 'wildcardPath', 'downloadIdWildcardPathGet');

        const headers: HttpHeaders = {
        };

        return this.request<Blob>({
            url: '/download/{id}/{wildcardPath}'.replace('{id}', encodeURI(id)).replace('{wildcardPath}', encodeURI(wildcardPath)),
            method: 'GET',
            headers,
            responseType: 'blob',
        }, opts?.responseOpts);
    };

    /**
     * List files in a user\'s folder
     */
    listIdWildcardPathGet({ id, wildcardPath }: ListIdWildcardPathGetRequest): Observable<ListIdWildcardPathGet200Response>
    listIdWildcardPathGet({ id, wildcardPath }: ListIdWildcardPathGetRequest, opts?: OperationOpts): Observable<AjaxResponse<ListIdWildcardPathGet200Response>>
    listIdWildcardPathGet({ id, wildcardPath }: ListIdWildcardPathGetRequest, opts?: OperationOpts): Observable<ListIdWildcardPathGet200Response | AjaxResponse<ListIdWildcardPathGet200Response>> {
        throwIfNullOrUndefined(id, 'id', 'listIdWildcardPathGet');
        throwIfNullOrUndefined(wildcardPath, 'wildcardPath', 'listIdWildcardPathGet');

        const headers: HttpHeaders = {
        };

        return this.request<ListIdWildcardPathGet200Response>({
            url: '/list/{id}/{wildcardPath}'.replace('{id}', encodeURI(id)).replace('{wildcardPath}', encodeURI(wildcardPath)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Login to obtain a JWT token
     */
    loginPost({ loginRequest }: LoginPostRequest): Observable<LoginResponse>
    loginPost({ loginRequest }: LoginPostRequest, opts?: OperationOpts): Observable<AjaxResponse<LoginResponse>>
    loginPost({ loginRequest }: LoginPostRequest, opts?: OperationOpts): Observable<LoginResponse | AjaxResponse<LoginResponse>> {
        throwIfNullOrUndefined(loginRequest, 'loginRequest', 'loginPost');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<LoginResponse>({
            url: '/login',
            method: 'POST',
            headers,
            body: loginRequest,
        }, opts?.responseOpts);
    };

    /**
     * Register a new user
     */
    registerPost({ registerRequest }: RegisterPostRequest): Observable<void>
    registerPost({ registerRequest }: RegisterPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    registerPost({ registerRequest }: RegisterPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(registerRequest, 'registerRequest', 'registerPost');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<void>({
            url: '/register',
            method: 'POST',
            headers,
            body: registerRequest,
        }, opts?.responseOpts);
    };

    /**
     * Upload a file into a user\'s folder
     */
    uploadIdPost({ id, file }: UploadIdPostRequest): Observable<void>
    uploadIdPost({ id, file }: UploadIdPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    uploadIdPost({ id, file }: UploadIdPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(id, 'id', 'uploadIdPost');

        const headers: HttpHeaders = {
        };

        const formData = new FormData();
        if (file !== undefined) { formData.append('file', file as any); }

        return this.request<void>({
            url: '/upload/{id}'.replace('{id}', encodeURI(id)),
            method: 'POST',
            headers,
            body: formData,
        }, opts?.responseOpts);
    };

}
