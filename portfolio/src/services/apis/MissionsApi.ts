/* tslint:disable */
/* eslint-disable */
/**
 * Project Manager ( Portfolio )
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  MissionCreate,
  MissionListResponse,
  MissionResponse,
  MissionUpdate,
} from '../models/index';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    MissionCreateFromJSON,
    MissionCreateToJSON,
    MissionListResponseFromJSON,
    MissionListResponseToJSON,
    MissionResponseFromJSON,
    MissionResponseToJSON,
    MissionUpdateFromJSON,
    MissionUpdateToJSON,
} from '../models/index';

export interface CreateApiMissionsPostRequest {
    missionCreate: MissionCreate;
}

export interface DeleteApiMissionsMissionIdDeleteRequest {
    missionId: string;
}

export interface ReadMissionApiMissionsMissionIdGetRequest {
    missionId: string;
}

export interface ReadMissionsApiMissionsGetRequest {
    page?: number;
    pageSize?: number;
}

export interface UpdateApiMissionsMissionIdPutRequest {
    missionId: string;
    missionUpdate: MissionUpdate;
}

/**
 * MissionsApi - interface
 * 
 * @export
 * @interface MissionsApiInterface
 */
export interface MissionsApiInterface {
    /**
     * Create a new mission.
     * @summary Create
     * @param {MissionCreate} missionCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MissionsApiInterface
     */
    createApiMissionsPostRaw(requestParameters: CreateApiMissionsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MissionResponse>>;

    /**
     * Create a new mission.
     * Create
     */
    createApiMissionsPost(missionCreate: MissionCreate, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MissionResponse>;

    /**
     * Delete a mission by ID.
     * @summary Delete
     * @param {string} missionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MissionsApiInterface
     */
    deleteApiMissionsMissionIdDeleteRaw(requestParameters: DeleteApiMissionsMissionIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * Delete a mission by ID.
     * Delete
     */
    deleteApiMissionsMissionIdDelete(missionId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * Retrieve a mission by ID.
     * @summary Read Mission
     * @param {string} missionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MissionsApiInterface
     */
    readMissionApiMissionsMissionIdGetRaw(requestParameters: ReadMissionApiMissionsMissionIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MissionResponse>>;

    /**
     * Retrieve a mission by ID.
     * Read Mission
     */
    readMissionApiMissionsMissionIdGet(missionId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MissionResponse>;

    /**
     * Retrieve a list of missions with pagination.
     * @summary Read Missions
     * @param {number} [page] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MissionsApiInterface
     */
    readMissionsApiMissionsGetRaw(requestParameters: ReadMissionsApiMissionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MissionListResponse>>;

    /**
     * Retrieve a list of missions with pagination.
     * Read Missions
     */
    readMissionsApiMissionsGet(page?: number, pageSize?: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MissionListResponse>;

    /**
     * Update a mission by ID.
     * @summary Update
     * @param {string} missionId 
     * @param {MissionUpdate} missionUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MissionsApiInterface
     */
    updateApiMissionsMissionIdPutRaw(requestParameters: UpdateApiMissionsMissionIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MissionResponse>>;

    /**
     * Update a mission by ID.
     * Update
     */
    updateApiMissionsMissionIdPut(missionId: string, missionUpdate: MissionUpdate, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MissionResponse>;

}

/**
 * 
 */
export class MissionsApi extends runtime.BaseAPI implements MissionsApiInterface {

    /**
     * Create a new mission.
     * Create
     */
    async createApiMissionsPostRaw(requestParameters: CreateApiMissionsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MissionResponse>> {
        if (requestParameters['missionCreate'] == null) {
            throw new runtime.RequiredError(
                'missionCreate',
                'Required parameter "missionCreate" was null or undefined when calling createApiMissionsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/missions/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MissionCreateToJSON(requestParameters['missionCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MissionResponseFromJSON(jsonValue));
    }

    /**
     * Create a new mission.
     * Create
     */
    async createApiMissionsPost(missionCreate: MissionCreate, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MissionResponse> {
        const response = await this.createApiMissionsPostRaw({ missionCreate: missionCreate }, initOverrides);
        return await response.value();
    }

    /**
     * Delete a mission by ID.
     * Delete
     */
    async deleteApiMissionsMissionIdDeleteRaw(requestParameters: DeleteApiMissionsMissionIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['missionId'] == null) {
            throw new runtime.RequiredError(
                'missionId',
                'Required parameter "missionId" was null or undefined when calling deleteApiMissionsMissionIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/missions/{mission_id}`.replace(`{${"mission_id"}}`, encodeURIComponent(String(requestParameters['missionId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Delete a mission by ID.
     * Delete
     */
    async deleteApiMissionsMissionIdDelete(missionId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.deleteApiMissionsMissionIdDeleteRaw({ missionId: missionId }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a mission by ID.
     * Read Mission
     */
    async readMissionApiMissionsMissionIdGetRaw(requestParameters: ReadMissionApiMissionsMissionIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MissionResponse>> {
        if (requestParameters['missionId'] == null) {
            throw new runtime.RequiredError(
                'missionId',
                'Required parameter "missionId" was null or undefined when calling readMissionApiMissionsMissionIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/missions/{mission_id}`.replace(`{${"mission_id"}}`, encodeURIComponent(String(requestParameters['missionId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MissionResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve a mission by ID.
     * Read Mission
     */
    async readMissionApiMissionsMissionIdGet(missionId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MissionResponse> {
        const response = await this.readMissionApiMissionsMissionIdGetRaw({ missionId: missionId }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of missions with pagination.
     * Read Missions
     */
    async readMissionsApiMissionsGetRaw(requestParameters: ReadMissionsApiMissionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MissionListResponse>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/missions/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MissionListResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve a list of missions with pagination.
     * Read Missions
     */
    async readMissionsApiMissionsGet(page?: number, pageSize?: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MissionListResponse> {
        const response = await this.readMissionsApiMissionsGetRaw({ page: page, pageSize: pageSize }, initOverrides);
        return await response.value();
    }

    /**
     * Update a mission by ID.
     * Update
     */
    async updateApiMissionsMissionIdPutRaw(requestParameters: UpdateApiMissionsMissionIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MissionResponse>> {
        if (requestParameters['missionId'] == null) {
            throw new runtime.RequiredError(
                'missionId',
                'Required parameter "missionId" was null or undefined when calling updateApiMissionsMissionIdPut().'
            );
        }

        if (requestParameters['missionUpdate'] == null) {
            throw new runtime.RequiredError(
                'missionUpdate',
                'Required parameter "missionUpdate" was null or undefined when calling updateApiMissionsMissionIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/missions/{mission_id}`.replace(`{${"mission_id"}}`, encodeURIComponent(String(requestParameters['missionId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MissionUpdateToJSON(requestParameters['missionUpdate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MissionResponseFromJSON(jsonValue));
    }

    /**
     * Update a mission by ID.
     * Update
     */
    async updateApiMissionsMissionIdPut(missionId: string, missionUpdate: MissionUpdate, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MissionResponse> {
        const response = await this.updateApiMissionsMissionIdPutRaw({ missionId: missionId, missionUpdate: missionUpdate }, initOverrides);
        return await response.value();
    }

}
