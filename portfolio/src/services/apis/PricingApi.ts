/* tslint:disable */
/* eslint-disable */
/**
 * Project Manager ( Portfolio )
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  PricingCreate,
  PricingListResponse,
  PricingResponse,
  PricingUpdate,
} from '../models/index';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    PricingCreateFromJSON,
    PricingCreateToJSON,
    PricingListResponseFromJSON,
    PricingListResponseToJSON,
    PricingResponseFromJSON,
    PricingResponseToJSON,
    PricingUpdateFromJSON,
    PricingUpdateToJSON,
} from '../models/index';

export interface CreateApiPricingPostRequest {
    pricingCreate: PricingCreate;
}

export interface DeleteApiPricingPricingIdDeleteRequest {
    pricingId: string;
}

export interface ReadPricingApiPricingGetRequest {
    page?: number;
    pageSize?: number;
}

export interface ReadPricingEntryApiPricingPricingIdGetRequest {
    pricingId: string;
}

export interface UpdateApiPricingPricingIdPutRequest {
    pricingId: string;
    pricingUpdate: PricingUpdate;
}

/**
 * PricingApi - interface
 * 
 * @export
 * @interface PricingApiInterface
 */
export interface PricingApiInterface {
    /**
     * Create a new pricing entry.
     * @summary Create
     * @param {PricingCreate} pricingCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PricingApiInterface
     */
    createApiPricingPostRaw(requestParameters: CreateApiPricingPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PricingResponse>>;

    /**
     * Create a new pricing entry.
     * Create
     */
    createApiPricingPost(pricingCreate: PricingCreate, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PricingResponse>;

    /**
     * Delete a pricing entry by ID.
     * @summary Delete
     * @param {string} pricingId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PricingApiInterface
     */
    deleteApiPricingPricingIdDeleteRaw(requestParameters: DeleteApiPricingPricingIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * Delete a pricing entry by ID.
     * Delete
     */
    deleteApiPricingPricingIdDelete(pricingId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * Retrieve a list of pricing entries with pagination.
     * @summary Read Pricing
     * @param {number} [page] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PricingApiInterface
     */
    readPricingApiPricingGetRaw(requestParameters: ReadPricingApiPricingGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PricingListResponse>>;

    /**
     * Retrieve a list of pricing entries with pagination.
     * Read Pricing
     */
    readPricingApiPricingGet(page?: number, pageSize?: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PricingListResponse>;

    /**
     * Retrieve a pricing entry by ID.
     * @summary Read Pricing Entry
     * @param {string} pricingId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PricingApiInterface
     */
    readPricingEntryApiPricingPricingIdGetRaw(requestParameters: ReadPricingEntryApiPricingPricingIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PricingResponse>>;

    /**
     * Retrieve a pricing entry by ID.
     * Read Pricing Entry
     */
    readPricingEntryApiPricingPricingIdGet(pricingId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PricingResponse>;

    /**
     * Update a pricing entry by ID.
     * @summary Update
     * @param {string} pricingId 
     * @param {PricingUpdate} pricingUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PricingApiInterface
     */
    updateApiPricingPricingIdPutRaw(requestParameters: UpdateApiPricingPricingIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PricingResponse>>;

    /**
     * Update a pricing entry by ID.
     * Update
     */
    updateApiPricingPricingIdPut(pricingId: string, pricingUpdate: PricingUpdate, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PricingResponse>;

}

/**
 * 
 */
export class PricingApi extends runtime.BaseAPI implements PricingApiInterface {

    /**
     * Create a new pricing entry.
     * Create
     */
    async createApiPricingPostRaw(requestParameters: CreateApiPricingPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PricingResponse>> {
        if (requestParameters['pricingCreate'] == null) {
            throw new runtime.RequiredError(
                'pricingCreate',
                'Required parameter "pricingCreate" was null or undefined when calling createApiPricingPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/pricing/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PricingCreateToJSON(requestParameters['pricingCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PricingResponseFromJSON(jsonValue));
    }

    /**
     * Create a new pricing entry.
     * Create
     */
    async createApiPricingPost(pricingCreate: PricingCreate, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PricingResponse> {
        const response = await this.createApiPricingPostRaw({ pricingCreate: pricingCreate }, initOverrides);
        return await response.value();
    }

    /**
     * Delete a pricing entry by ID.
     * Delete
     */
    async deleteApiPricingPricingIdDeleteRaw(requestParameters: DeleteApiPricingPricingIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['pricingId'] == null) {
            throw new runtime.RequiredError(
                'pricingId',
                'Required parameter "pricingId" was null or undefined when calling deleteApiPricingPricingIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/pricing/{pricing_id}`.replace(`{${"pricing_id"}}`, encodeURIComponent(String(requestParameters['pricingId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Delete a pricing entry by ID.
     * Delete
     */
    async deleteApiPricingPricingIdDelete(pricingId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.deleteApiPricingPricingIdDeleteRaw({ pricingId: pricingId }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of pricing entries with pagination.
     * Read Pricing
     */
    async readPricingApiPricingGetRaw(requestParameters: ReadPricingApiPricingGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PricingListResponse>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/pricing/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PricingListResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve a list of pricing entries with pagination.
     * Read Pricing
     */
    async readPricingApiPricingGet(page?: number, pageSize?: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PricingListResponse> {
        const response = await this.readPricingApiPricingGetRaw({ page: page, pageSize: pageSize }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a pricing entry by ID.
     * Read Pricing Entry
     */
    async readPricingEntryApiPricingPricingIdGetRaw(requestParameters: ReadPricingEntryApiPricingPricingIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PricingResponse>> {
        if (requestParameters['pricingId'] == null) {
            throw new runtime.RequiredError(
                'pricingId',
                'Required parameter "pricingId" was null or undefined when calling readPricingEntryApiPricingPricingIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/pricing/{pricing_id}`.replace(`{${"pricing_id"}}`, encodeURIComponent(String(requestParameters['pricingId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PricingResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve a pricing entry by ID.
     * Read Pricing Entry
     */
    async readPricingEntryApiPricingPricingIdGet(pricingId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PricingResponse> {
        const response = await this.readPricingEntryApiPricingPricingIdGetRaw({ pricingId: pricingId }, initOverrides);
        return await response.value();
    }

    /**
     * Update a pricing entry by ID.
     * Update
     */
    async updateApiPricingPricingIdPutRaw(requestParameters: UpdateApiPricingPricingIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PricingResponse>> {
        if (requestParameters['pricingId'] == null) {
            throw new runtime.RequiredError(
                'pricingId',
                'Required parameter "pricingId" was null or undefined when calling updateApiPricingPricingIdPut().'
            );
        }

        if (requestParameters['pricingUpdate'] == null) {
            throw new runtime.RequiredError(
                'pricingUpdate',
                'Required parameter "pricingUpdate" was null or undefined when calling updateApiPricingPricingIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/pricing/{pricing_id}`.replace(`{${"pricing_id"}}`, encodeURIComponent(String(requestParameters['pricingId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PricingUpdateToJSON(requestParameters['pricingUpdate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PricingResponseFromJSON(jsonValue));
    }

    /**
     * Update a pricing entry by ID.
     * Update
     */
    async updateApiPricingPricingIdPut(pricingId: string, pricingUpdate: PricingUpdate, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PricingResponse> {
        const response = await this.updateApiPricingPricingIdPutRaw({ pricingId: pricingId, pricingUpdate: pricingUpdate }, initOverrides);
        return await response.value();
    }

}
