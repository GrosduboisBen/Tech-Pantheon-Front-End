/* tslint:disable */
/* eslint-disable */
/**
 * Project Manager ( Portfolio )
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  RoleCreate,
  RoleListResponse,
  RoleResponse,
  RoleUpdate,
} from '../models/index';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    RoleCreateFromJSON,
    RoleCreateToJSON,
    RoleListResponseFromJSON,
    RoleListResponseToJSON,
    RoleResponseFromJSON,
    RoleResponseToJSON,
    RoleUpdateFromJSON,
    RoleUpdateToJSON,
} from '../models/index';

export interface CreateApiRolesPostRequest {
    roleCreate: RoleCreate;
}

export interface DeleteApiRolesRoleIdDeleteRequest {
    roleId: string;
}

export interface ReadRoleApiRolesRoleIdGetRequest {
    roleId: string;
}

export interface ReadRolesApiRolesGetRequest {
    page?: number;
    pageSize?: number;
}

export interface UpdateApiRolesRoleIdPutRequest {
    roleId: string;
    roleUpdate: RoleUpdate;
}

/**
 * RolesApi - interface
 * 
 * @export
 * @interface RolesApiInterface
 */
export interface RolesApiInterface {
    /**
     * Create a new role.
     * @summary Create
     * @param {RoleCreate} roleCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApiInterface
     */
    createApiRolesPostRaw(requestParameters: CreateApiRolesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoleResponse>>;

    /**
     * Create a new role.
     * Create
     */
    createApiRolesPost(roleCreate: RoleCreate, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoleResponse>;

    /**
     * Delete a role by ID.
     * @summary Delete
     * @param {string} roleId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApiInterface
     */
    deleteApiRolesRoleIdDeleteRaw(requestParameters: DeleteApiRolesRoleIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * Delete a role by ID.
     * Delete
     */
    deleteApiRolesRoleIdDelete(roleId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * Retrieve a role by ID.
     * @summary Read Role
     * @param {string} roleId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApiInterface
     */
    readRoleApiRolesRoleIdGetRaw(requestParameters: ReadRoleApiRolesRoleIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoleResponse>>;

    /**
     * Retrieve a role by ID.
     * Read Role
     */
    readRoleApiRolesRoleIdGet(roleId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoleResponse>;

    /**
     * Retrieve a list of roles with pagination.
     * @summary Read Roles
     * @param {number} [page] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApiInterface
     */
    readRolesApiRolesGetRaw(requestParameters: ReadRolesApiRolesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoleListResponse>>;

    /**
     * Retrieve a list of roles with pagination.
     * Read Roles
     */
    readRolesApiRolesGet(page?: number, pageSize?: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoleListResponse>;

    /**
     * Update a role by ID.
     * @summary Update
     * @param {string} roleId 
     * @param {RoleUpdate} roleUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApiInterface
     */
    updateApiRolesRoleIdPutRaw(requestParameters: UpdateApiRolesRoleIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoleResponse>>;

    /**
     * Update a role by ID.
     * Update
     */
    updateApiRolesRoleIdPut(roleId: string, roleUpdate: RoleUpdate, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoleResponse>;

}

/**
 * 
 */
export class RolesApi extends runtime.BaseAPI implements RolesApiInterface {

    /**
     * Create a new role.
     * Create
     */
    async createApiRolesPostRaw(requestParameters: CreateApiRolesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoleResponse>> {
        if (requestParameters['roleCreate'] == null) {
            throw new runtime.RequiredError(
                'roleCreate',
                'Required parameter "roleCreate" was null or undefined when calling createApiRolesPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/roles/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RoleCreateToJSON(requestParameters['roleCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoleResponseFromJSON(jsonValue));
    }

    /**
     * Create a new role.
     * Create
     */
    async createApiRolesPost(roleCreate: RoleCreate, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoleResponse> {
        const response = await this.createApiRolesPostRaw({ roleCreate: roleCreate }, initOverrides);
        return await response.value();
    }

    /**
     * Delete a role by ID.
     * Delete
     */
    async deleteApiRolesRoleIdDeleteRaw(requestParameters: DeleteApiRolesRoleIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['roleId'] == null) {
            throw new runtime.RequiredError(
                'roleId',
                'Required parameter "roleId" was null or undefined when calling deleteApiRolesRoleIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/roles/{role_id}`.replace(`{${"role_id"}}`, encodeURIComponent(String(requestParameters['roleId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Delete a role by ID.
     * Delete
     */
    async deleteApiRolesRoleIdDelete(roleId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.deleteApiRolesRoleIdDeleteRaw({ roleId: roleId }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a role by ID.
     * Read Role
     */
    async readRoleApiRolesRoleIdGetRaw(requestParameters: ReadRoleApiRolesRoleIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoleResponse>> {
        if (requestParameters['roleId'] == null) {
            throw new runtime.RequiredError(
                'roleId',
                'Required parameter "roleId" was null or undefined when calling readRoleApiRolesRoleIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/roles/{role_id}`.replace(`{${"role_id"}}`, encodeURIComponent(String(requestParameters['roleId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoleResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve a role by ID.
     * Read Role
     */
    async readRoleApiRolesRoleIdGet(roleId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoleResponse> {
        const response = await this.readRoleApiRolesRoleIdGetRaw({ roleId: roleId }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of roles with pagination.
     * Read Roles
     */
    async readRolesApiRolesGetRaw(requestParameters: ReadRolesApiRolesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoleListResponse>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/roles/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoleListResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve a list of roles with pagination.
     * Read Roles
     */
    async readRolesApiRolesGet(page?: number, pageSize?: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoleListResponse> {
        const response = await this.readRolesApiRolesGetRaw({ page: page, pageSize: pageSize }, initOverrides);
        return await response.value();
    }

    /**
     * Update a role by ID.
     * Update
     */
    async updateApiRolesRoleIdPutRaw(requestParameters: UpdateApiRolesRoleIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoleResponse>> {
        if (requestParameters['roleId'] == null) {
            throw new runtime.RequiredError(
                'roleId',
                'Required parameter "roleId" was null or undefined when calling updateApiRolesRoleIdPut().'
            );
        }

        if (requestParameters['roleUpdate'] == null) {
            throw new runtime.RequiredError(
                'roleUpdate',
                'Required parameter "roleUpdate" was null or undefined when calling updateApiRolesRoleIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/roles/{role_id}`.replace(`{${"role_id"}}`, encodeURIComponent(String(requestParameters['roleId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RoleUpdateToJSON(requestParameters['roleUpdate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoleResponseFromJSON(jsonValue));
    }

    /**
     * Update a role by ID.
     * Update
     */
    async updateApiRolesRoleIdPut(roleId: string, roleUpdate: RoleUpdate, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoleResponse> {
        const response = await this.updateApiRolesRoleIdPutRaw({ roleId: roleId, roleUpdate: roleUpdate }, initOverrides);
        return await response.value();
    }

}
